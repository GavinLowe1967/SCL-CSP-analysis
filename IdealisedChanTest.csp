-- A test on a SyncChan, comparing it to an idealised specification. 

-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2 -- | T3 -- | T4

ChanThreads =  diff(ThreadID, {AltThread})

-- Identities of channels
datatype ChanID = Chan1

-- Max # branches in an alt
size = 2 
Index = {0..size-1}

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1

include "NewSyncChan.csp" 

-- Create channel
instance C1 = SyncChan(ThreadID, AltID, Data, size)

ChanThreadEvents = {|
  C1::beginSend.t, C1::endSend.t, C1::beginReceive.t, C1::endReceive.t,
  C1::beginSendWithin.t, C1::endSendWithin.t, 
  C1::beginReceiveWithin.t, C1::endReceiveWithin.t,
  C1::beginClose.t, C1::endClose.t 
    | t <- ChanThreads
|}

-- Events that are not blocked. 
AllowedEvents = Union({ 
  ChanThreadEvents, C1::altRegistrationEvents(AltThread, Alt1), C1::AltCallBacks
})

-- The system to test
System0 = C1::runWithAndHide(RUN(AllowedEvents)) 

include "IdealisedChan.csp"

instance IC = IdealisedChan(size)

System = System0[[
  C1::beginSend <- IC::beginSend, C1::endSend <- IC::endSend,
  C1::beginReceive <- IC::beginReceive, C1::endReceive <- IC::endReceive,
  C1::beginSendWithin <- IC::beginSendWithin, 
  C1::endSendWithin <- IC::endSendWithin,
  C1::beginReceiveWithin <- IC::beginReceiveWithin, 
  C1::endReceiveWithin <- IC::endReceiveWithin,
  C1::beginClose <- IC::beginClose, C1::endClose <- IC::endClose,
  C1::beginRegisterOut <- IC::beginRegisterOut, 
  C1::endRegisterOut <- IC::endRegisterOut,
  C1::beginRegisterIn <- IC::beginRegisterIn, 
  C1::endRegisterIn <- IC::endRegisterIn,
  C1::beginDeregisterOut <- IC::beginDeregisterOut, 
  C1::endDeregisterOut <- IC::endDeregisterOut,
  C1::beginDeregisterIn <- IC::beginDeregisterIn, 
  C1::endDeregisterIn <- IC::endDeregisterIn,
  C1::beginMaybeReceive <- IC::beginMaybeReceive,
  C1::endMaybeReceive <- IC::endMaybeReceive,
  C1::beginMaybeSend <- IC::beginMaybeSend,
  C1::endMaybeSend <- IC::endMaybeSend,
  C1::beginPortClosed <- IC::beginPortClosed,
  C1::endPortClosed <- IC::endPortClosed
]]  

assert IC::SpecF [T= System

assert IC::SpecF [F= System

assert IC::SpecD [FD= System

assert IC::ChannelSpec :[ divergence free ]