-- A test on a SyncChan, comparing it to an idealised specification. 

-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2 -- | T3 -- | T4

--others(t) = diff(ChanThreads, {t})

ChanThreads =  diff(ThreadID, {AltThread})

-- Identities of channels
datatype ChanID = Chan1

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1

include "NewSyncChan.csp" 

-- Max # branches in an alt
size = 2 

-- Create channel
instance C1 = SyncChan(ThreadID, AltID, Data, size)

-- A channel thread, which alternates between begins and ends.
Thread(me) = 
  C1::beginSend.me?x -> C1::endSend.me?res -> Thread(me) 
  |~|
  C1::beginReceive.me -> C1::endReceive.me?res -> Thread(me)
  |~|
false & (
  C1::beginSendWithin.me?x -> C1::endSendWithin.me?b -> Thread(me)
  |~|
  C1::beginReceiveWithin.me -> C1::endReceiveWithin.me?ox -> Thread(me)
)
  |~|
  C1::beginClose.me -> C1::endClose.me -> Thread(me)
  |~| 
  STOP

-- The alt thread, which alternates between begin and end events.
TheAltThread(me, alt) = 
  C1::beginRegisterIn.me.alt$index -> C1::endRegisterIn.me.alt?_ ->
    TheAltThread(me, alt)
  |~|
  C1::beginDeregisterIn.me.alt$index -> C1::endDeregisterIn.me.alt ->
    TheAltThread(me, alt)
  |~| 
  C1::beginRegisterOut.me.alt$index -> C1::endRegisterOut.me.alt?_ ->
    TheAltThread(me, alt)
  |~|
  C1::beginDeregisterOut.me.alt$index -> C1::endDeregisterOut.me.alt ->
    TheAltThread(me, alt)
  |~|
  STOP

Threads = (||| t <- ChanThreads @ Thread(t))  ||| TheAltThread(AltThread, Alt1)

-- The system to test
System0 = C1::runWithAndHide(Threads ||| RUN(C1::AltCallBacks))


include "IdealisedChan.csp"

instance IC = IdealisedChan(size)

System = System0[[
  C1::beginSend <- IC::beginSend, C1::endSend <- IC::endSend,
  C1::beginReceive <- IC::beginReceive, C1::endReceive <- IC::endReceive,
  C1::beginClose <- IC::beginClose, C1::endClose <- IC::endClose,
  C1::beginRegisterOut <- IC::beginRegisterOut, 
  C1::endRegisterOut <- IC::endRegisterOut,
  C1::beginRegisterIn <- IC::beginRegisterIn, 
  C1::endRegisterIn <- IC::endRegisterIn,
  C1::beginDeregisterOut <- IC::beginDeregisterOut, 
  C1::endDeregisterOut <- IC::endDeregisterOut,
  C1::beginDeregisterIn <- IC::beginDeregisterIn, 
  C1::endDeregisterIn <- IC::endDeregisterIn,
  C1::beginMaybeReceive <- IC::beginMaybeReceive,
  C1::endMaybeReceive <- IC::endMaybeReceive,
  C1::beginMaybeSend <- IC::beginMaybeSend,
  C1::endMaybeSend <- IC::endMaybeSend,
  C1::beginPortClosed <- IC::beginPortClosed,
  C1::endPortClosed <- IC::endPortClosed
]]  

assert IC::SpecF [T= System

assert IC::SpecF [F= System

assert IC::SpecD [FD= System

assert IC::ChannelSpec :[ divergence free ]