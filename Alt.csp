-- A model of an Alt with identity this, and branches given by branches.  
module Alt(this, branches, ThreadID, ChanID)
  include "Variable.csp"
  include "Macros.csp"

  include "JVMMonitor.csp"

  -- The registering variable
  channel getRegistering, setRegistering : ThreadID . Bool
  Registering = Var(true, getRegistering, setRegistering)

  -- The done variable
  channel getDone, setDone : ThreadID . Bool
  Done = Var(false, getDone, setDone)

  size = length(branches)

  -- Indices of branches
  Index = {0 .. size-1}

  -- The toRun variable.
  channel getToRun, setToRun : ThreadID . union({(-1)}, Index)
  ToRun = Var(-1, getToRun, setToRun)

  -- The value received.  
  channel getValueReceived, setValueReceived : ThreadID . Data
  ValueReceived = Var(A, getValueReceived, setValueReceived)

  -- The numEnabled variable
  channel getNumEnabled, setNumEnabled : ThreadID . {0..size}
  NumEnabled = Var(0, getNumEnabled, setNumEnabled)

  -- Macro for numEnabled += 1
  IncNumEnabled(me) = 
    getNumEnabled.me?ne -> Assert(ne < size, setNumEnabled.me.ne+1 -> SKIP)

  -- The value sent.  This is not actually part of the implementation, but is
  -- needed to capture the specification.
  channel getValueSent, setValueSent : ThreadID . Option
  ValueSent = Var(None, getValueSent, setValueSent)

  -- The array of enabled variables
  channel getEnabled, setEnabled : ThreadID . Index . Bool
  Enabled = Array(Index, false, getEnabled, setEnabled)

  -- All variables
  Variables = 
    Registering ||| Done ||| ToRun ||| ValueReceived ||| NumEnabled ||| 
    ValueSent ||| Enabled

  varEvents = {|
    getRegistering, setRegistering, getDone, setDone, getToRun, setToRun, 
    getValueReceived, setValueReceived, getNumEnabled, setNumEnabled, 
    getValueSent, setValueSent, getEnabled, setEnabled
  |} 

  -- The n'th element of a sequence
  nth(xs, 0) = head(xs)
  nth(xs, n) = nth(tail(xs), n-1)

  ---------- Model of code

  --------- Run the Alt, and apply cont to the value received.
  Run :: (ThreadID, (AltResult) -> Proc) -> Proc
  Run(me, cont) = 
    -- synchronized{ registering = true }
    JVMMonitor::Synchronized(me, setRegistering.me.true -> SKIP);
    RegisterLoop(me, cont, 0)

  -- Register with branches from index i.
  RegisterLoop(me, cont, i) = 
    if i == size then AfterLoop(me, cont)
    -- we short-circuit when done gets set to true
    -- else getDone.me?done -> 
    --   if done then AfterLoop(me, cont)
    else Register(me, cont, i, nth(branches, i)) 

  -- Register with an InPort
  Register(me, cont, i, InPortBranch.c) = 
    beginRegisterIn.me.c.i -> (
      endRegisterIn.me.c.RegisterInSuccess?x -> 
        setValueReceived.me.x -> setToRun.me.i -> 
        setDone.me.true -> AfterLoop(me, cont)
      [] 
      endRegisterIn.me.c.RegisterInWaiting -> 
        setEnabled.me.i.true -> IncNumEnabled(me); RegisterLoop(me, cont, i+1)
      []
      endRegisterIn.me.c.RegisterInClosed -> RegisterLoop(me, cont, i+1)
    )

  -- Register with an OutPort
  Register(me, cont, i, OutPortBranch.c) = 
    beginRegisterOut.me.c.i -> (
      endRegisterOut.me.c.RegisterOutSuccess?x -> setToRun.me.i -> 
        setDone.me.true -> setValueSent.me.Some.x -> AfterLoop(me, cont)
      []
      endRegisterOut.me.c.RegisterOutWaiting -> 
        setEnabled.me.i.true -> IncNumEnabled(me); RegisterLoop(me, cont, i+1)
      []
      endRegisterOut.me.c.RegisterOutClosed ->
        setEnabled.me.i.false -> RegisterLoop(me, cont, i+1)
    )

  -- Code after the registration loop.  
  AfterLoop(me, cont) = 
    JVMMonitor::Synchronized(me, AfterLoop1(me, cont));
    PostWait(me, cont)

  -- The body of the synchronized block. 
  AfterLoop1(me, cont) = 
    setRegistering.me.false -> JVMMonitor::NotifyAll(me);
    getDone.me?done -> 
    if not done then
      -- while(!done && numEnabled > 0) wait()
      let Test(k) = -- !done && numEnabled > 0
        getDone.me?done -> 
        if done then k(false) else getNumEnabled.me?ne -> k(ne > 0) 
      within
      While(Test, JVMMonitor::Wait(me));  
      -- if(numEnabled == 0) throw new AltAbort
      getNumEnabled.me?ne -> if ne == 0 then cont(AltAbort) else SKIP
    else SKIP

  -- Code after the (possible) wait
  PostWait(me, cont) = 
    IfStrict(getDone.me?done -> Assert1(done)); 
    DeregisterLoop(me, cont, 0)

  -- Deregister branches[i..size)
  DeregisterLoop(me, cont, i) = 
    if i == size then RunBranch(me, cont)
    else 
      getToRun.me?toRun -> getEnabled.me.i?enabled -> 
      if i != toRun and enabled then 
        Deregister(me, cont, i, nth(branches,i)); DeregisterLoop(me, cont, i+1)
      else DeregisterLoop(me, cont, i+1)

  -- Deregister branch at index i.
  Deregister(me, cont, i, InPortBranch.c) = 
    beginDeregisterIn.me.c.i -> endDeregisterIn.me.c -> SKIP

  Deregister(me, cont, i, OutPortBranch.c) = 
    beginDeregisterOut.me.c.i -> endDeregisterOut.me.c -> SKIP

  -- Run the branch toRun.
  RunBranch(me, cont) = 
    getToRun.me?toRun -> 
    Assert(toRun >= 0, RunBranch1(me, cont, toRun, nth(branches, toRun)))

  RunBranch1(me, cont, toRun, InPortBranch.c) = 
    IfStrict(getValueSent.me?oValue -> Assert1(oValue == None));
    getValueReceived.me?valueReceived -> cont(AltReceive.toRun.valueReceived)

  RunBranch1(me, cont, toRun, OutPortBranch.c) = 
    getValueSent.me?oValue -> 
    Assert(oValue != None, let Some.x = oValue within cont(AltSend.toRun.x))

  ------ Reset for next round

  Reset(me) = JVMMonitor::Synchronized(me, Reset1(me, 0))

  -- Clear enabled[i..size).
  Reset1(me,i) = 
    if i < size then setEnabled.me.i.false -> Reset1(me,i+1)
    else -- reset simple variables
      setNumEnabled.me.0 -> setToRun.me.(-1) -> 
      setDone.me.false -> setValueSent.me.None -> SKIP

  -------- The maybeReceive function

  -- maybeReceive function; try to get Alt to receive value from the InPort of
  -- branch index.  Apply cont to Bool indicating if successful.
  MaybeReceive :: (ThreadID, Data, Int, (Bool) -> Proc) -> Proc
  MaybeReceive(me, value, index, cont) = 
    JVMMonitor::SynchronizedC(me, MaybeReceive1(me, value, index), cont)

  -- while(registering) wait() 
  WaitWhileRegistering(me) = 
    let Test(k) = getRegistering.me?registering -> k(registering) within
    While(Test, JVMMonitor::Wait(me))

  -- Body of maybeReceive
  MaybeReceive1(me, value, index)(cont) = 
    WaitWhileRegistering(me);
    -- assert(enabled(index))
    getEnabled.me.index?enab -> Assert1(enab);
    -- if(done) ...
    getDone.me?done -> 
    if done then
      -- enabled(index) = false; false
      setEnabled.me.index.false -> cont(false)
    else  
      -- assert(enabled(index)); 
      -- getEnabled.me.index?enab -> Assert1(enab); 
-- IMPROVE: unnecessary check in Scala
      -- enabled(index) = false; valueReceived = value
      setEnabled.me.index.false -> setValueReceived.me.value -> 
      -- toRun = index; done = true; notify(); true
      setToRun.me.index -> setDone.me.true -> 
      JVMMonitor::Notify(me); cont(true)

  -------- The maybeSend function

  MaybeSend :: (ThreadID, Int, (Option) -> Proc) -> Proc
  MaybeSend(me, index, cont) =
    JVMMonitor::SynchronizedC(me, MaybeSend1(me, index), cont)

  MaybeSend1(me, index)(cont) =  
    WaitWhileRegistering(me);
    -- assert(numEnabled > 0 && enabled(index))
    -- getNumEnabled.me?ne -> Assert1(ne > 0); 
    getEnabled.me.index?enab -> Assert1(enab);
    -- if(done){ enabled(index) = false; None }
    getDone.me?done ->
    if done then setEnabled.me.index.false -> cont(None)
    else
      -- enabled(index) = false; toRun = index; done = true; notify();
      setEnabled.me.index.false -> setToRun.me.index -> setDone.me.true ->
      JVMMonitor::Notify(me);
      -- val result = opb.value(); Some(result)
      setValueSent.me.Some$x -> cont(Some.x)


  -------- The portClosed field

  PortClosed(me, index) = JVMMonitor::Synchronized(me, PortClosed1(me, index))

  PortClosed1(me, i) = 
    -- while(registering) wait() 
    WaitWhileRegistering(me);
    -- assert(enabled(i))
    getEnabled.me.i?en -> Assert1(en);
    -- if(!done) ...
    getDone.me?d -> 
    if not d then
      -- enabled(i) = false; numEnabled -= 1
      setEnabled.me.i.false -> getNumEnabled.me?ne ->
      Assert(ne > 0, setNumEnabled.me.ne-1 -> PortClosed2(me))
    else SKIP

  PortClosed2(me) = 
    -- if(numEnabled == 0) notify()
    getNumEnabled.me?ne -> if ne == 0 then JVMMonitor::Notify(me) else SKIP

  -------- Threads that interact with the alt

  -- Thread me interacting with the alt, corresponding to the main run function
  -- and the maybeReceive function.  
  Thread(me) = 
    beginAlt.me -> Run(me, \ res @ endAlt.me.res -> Reset(me)); Thread(me)
    []
    beginMaybeSend.me?index ->
       MaybeSend(me, index, \ res @ endMaybeSend.me.res -> Thread(me))
    []
    beginMaybeReceive.me?index.x -> 
      MaybeReceive(me, x, index, \ res @ endMaybeReceive.me.res -> Thread(me))
    []
    beginPortClosed.me?index -> PortClosed(me, index); 
      endPortClosed.me -> Thread(me)

  Threads = ||| t <- ThreadID @ Thread(t)

  ---- The internals of the Alt: threads, variables, monitor.
  Internals = JVMMonitor::runWith(Threads [| varEvents |] Variables)
  
  InternalEvents = union(varEvents, JVMMonitor::events)

  ---- Interface with clients
  AltInterface = {| beginAlt, endAlt |}

exports
  
  -- The type of information about how an alt ended.
  datatype AltResult = AltReceive.Index.Data | AltSend.Index.Data | AltAbort

  -- Events for invocations of the main run function.
  channel beginAlt: ThreadID
  channel endAlt: ThreadID . AltResult -- Index . Data

  -- Events for invocations of maybeReceive, maybeSend.
  channel beginMaybeReceive: ThreadID . Index . Data
  channel endMaybeReceive : ThreadID . Bool

  channel beginMaybeSend : ThreadID . Index
  channel endMaybeSend : ThreadID . Option 

  -- Channels for operations the alt calls on ports.
  channel beginRegisterIn : ThreadID . ChanID . Index
  channel endRegisterIn : ThreadID . ChanID . RegisterInResult
  channel beginRegisterOut : ThreadID . ChanID . Index 
  channel endRegisterOut : ThreadID . ChanID . RegisterOutResult

  channel beginDeregisterIn : ThreadID . ChanID . Index
  channel endDeregisterIn : ThreadID . ChanID
  channel beginDeregisterOut : ThreadID . ChanID . Index 
  channel endDeregisterOut : ThreadID . ChanID

  channel beginPortClosed : ThreadID . Index
  channel endPortClosed : ThreadID 

  spuriousWakeup = JVMMonitor::spuriousWakeup

  -- The interface between the alt and channels (in both directions). 
  ChannelInterface = 
    {| beginRegisterIn, endRegisterIn, beginRegisterOut, endRegisterOut,
       beginDeregisterIn, endDeregisterIn, beginDeregisterOut, endDeregisterOut,
       beginMaybeSend, endMaybeSend, beginMaybeReceive, endMaybeReceive,
       beginPortClosed, endPortClosed
    |}

  Interface = union( AltInterface, ChannelInterface )

  ----- Administrative functions.

  -- Run P with this Alt
  runWith(P) = P [| Interface |] Internals

  -- Run P with this Alt, and hide internals except spuriousWakeup
  runWithAndHide(P) = runWith(P) \ InternalEvents

endmodule