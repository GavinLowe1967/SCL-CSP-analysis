-- A module representing a synchronous channel. 

module SyncChan(ThreadID, Data)
  include "Variable.csp"
  include "Macros.csp"

  -- Do we initialise Value to a specific value, arguing by symmetry?
  useSymmetry = false

  -- The "value" variable: the current or previous value.
  channel getValue, setValue: ThreadID.Data
  Value = 
    if useSymmetry then Var(head(seq(Data)), getValue, setValue)  
    else |~| x:Data @ Var(x, getValue, setValue) 

  -- The "status" variable: the current status of an exchange.
  datatype StatusT = Empty | Filled | Read
  channel getStatus, setStatus : ThreadID . StatusT
  Status = Var(Empty, getStatus, setStatus)

  -- All variables

  Variables = Status ||| Value

  varEvents = {| getStatus, setStatus, getValue, setValue |}

  -- Monitor and conditions
  datatype ConditionID = SlotFull | Continue | SlotEmptied

  include "MonitorCondition.csp"

  -------- Sending

  -- Thread me sends x.  The continuation expects a SendResult.
  Send :: (ThreadID, Data) -> Proc
  Send(me, x) = MonitorCondition::Lock(me); Send1(me, x)

  -- while(status != Empty) slotEmptied.await()
  Send1 :: (ThreadID, Data) -> Proc
  Send1(me, x) = 
    getStatus.me?s ->
    if s == Empty then Send2(me, x)
    else (MonitorCondition::Await(me, SlotEmptied); Send1(me, x))

  Send2 :: (ThreadID, Data) -> Proc
  Send2(me, x) = 
    -- value = x; status = Filled
    setValue.me.x -> setStatus.me.Filled -> 
    -- slotFull.signal(); continue.await()
    MonitorCondition::Signal(me, SlotFull);	
    MonitorCondition::Await(me, Continue);
    -- assert(status == Read)
    getStatus.me?s -> Assert1(s == Read); 
    -- status = Empty; slotEmptied.signal()
    setStatus.me.Empty -> MonitorCondition::Signal(me, SlotEmptied);
    -- unlock and done
    MonitorCondition::Unlock(me); endSend.me.SendSuccess -> SKIP

  -------- Receiving

  -- Thread me receives value.  The continuation expects to be given a
  -- ReceiveResult.
  Receive :: (ThreadID) -> Proc
  Receive(me) = MonitorCondition::Lock(me); Receive1(me)

  -- while(status != Filled) slotFull.await() 
  Receive1 :: (ThreadID) -> Proc
  Receive1(me) =
    getStatus.me?s -> 
    if s != Filled then MonitorCondition::Await(me, SlotFull); Receive1(me)
    else Receive2(me)

  Receive2(me) = 
    -- status = Read; continue.signal(); value
    setStatus.me!Read -> MonitorCondition::Signal(me, Continue); 
    -- return value
    getValue.me?v -> 
    (MonitorCondition::Unlock(me); endReceive.me.ReceiveSuccess.v -> SKIP) 

  ---------- Threads

  -- A thread that performs operations, wrapping them in begin/end events
  Thread(me) = 
    beginSend.me?x -> Send(me, x); Thread(me)
    []
    beginReceive.me -> Receive(me); Thread(me)

  Threads0 = ||| t : ThreadID @ Thread(t)
  Threads = if useSymmetry then Threads0 else  getValue?t?x -> Threads0
  -- Note: we have a dummy read of value here, to force the value to be chosen
  -- initially, as a state-space reduction trick.

  --------  All internal processes and events

  -- Internal processes and their events
  Internals = MonitorCondition::runWith(Threads [| varEvents |] Variables)

  internals = union(varEvents, MonitorCondition::events)

  -- Hide internals and compress.  Compression is a serious bottleneck. 
  transparent normal, sbisim, diamond
  compress(P) = P -- sbisim(diamond(P))
  Internals10 = compress(MonitorCondition::runWithAndHide(Threads))
  Internals1 = (Internals10 [| varEvents |] Variables) \ varEvents

exports
  -- Definition of the interface of the channel.  Shared with ChanInterface.
  include "ChanInterface.csp"

  channel assertionError 

  ------ Administrative functions

  -- Run P with this channel
  runWith(P) = P [| Interface |] Internals

  -- Run P with this channel, and hide internals
  runWithAndHide(P) = runWith(P) \ internals

endmodule