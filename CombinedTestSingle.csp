-- A test on the combination of an alt and a single channel.

-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2 --  | T3 -- | T4

others(t) = diff(ChanThreads, {t})

ChanThreads =  diff(ThreadID, {AltThread})

-- Identities of channels
datatype ChanID = c1 -- | c2

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1 -- | Alt2

-- The list of branches in the alt.  Select one of the following.
branches = <OutPortBranch.c1>
--branches = <InPortBranch.c1>

size = length(branches)

Index = {0..size-1}

-- Index of channel c in branches
index(c) = 
  let index1(c,cs) = if c == head(cs) then 0 else 1 + index1(c, tail(cs))
  within index1(c, branches)

Strict = false

-- Execute P if Strict is set.  Used for optional assertions. 
IfStrict(P) = if Strict then P else SKIP

-- include "SyncChanAlt.csp"
include "NewSyncChan.csp" 

-- Create channel
instance C1 = SyncChan(ThreadID, AltID, Data, size)

include "Alt.csp"

-- Create the alt.
instance A1 = Alt(Alt1, branches, ThreadID, ChanID)

------ Threads

-- The thread that runs the Alt repeatedly. 

ALTFLAG = true

TheAltThread(me) = ALTFLAG & RUN(A1::altInterface(AltThread))

-- A thread that tries to send on a channel

CLOSEFLAG = true

-- Thread with identity me, which repeatedly sends or receives, or neither.
Thread(me) = 
  C1::beginSend.me?x -> C1::endSend.me?res -> Thread(me) 
  []
  C1::beginReceive.me -> C1::endReceive.me?res -> Thread(me)
  []
  C1::beginSendWithin.me?x -> C1::endSendWithin.me?b -> Thread(me)
  []
  C1::beginReceiveWithin.me -> C1::endReceiveWithin.me?ox -> Thread(me)
  []
  CLOSEFLAG & C1::beginClose.me -> C1::endClose.me -> Thread(me)

Threads = (||| t <- ChanThreads @ Thread(t)) ||| TheAltThread(AltThread)

-- Put the system together

-- Run Threads with C1 and C2, and rename events to be consistent with the
-- alt.
System00 = C1::runWithClientsAndHide(Threads)

System01 = 
  System00 [[
    C1::beginRegisterIn.t.Alt1 <- A1::beginRegisterIn.t.c1,
    C1::endRegisterIn.t.Alt1 <- A1::endRegisterIn.t.c1,
    C1::beginDeregisterIn.t.Alt1 <- A1::beginDeregisterIn.t.c1,
    C1::endDeregisterIn.t.Alt1 <- A1::endDeregisterIn.t.c1,
    C1::beginRegisterOut.t.Alt1 <- A1::beginRegisterOut.t.c1,
    C1::endRegisterOut.t.Alt1 <- A1::endRegisterOut.t.c1,
    C1::beginDeregisterOut.t.Alt1 <- A1::beginDeregisterOut.t.c1,
    C1::endDeregisterOut.t.Alt1 <- A1::endDeregisterOut.t.c1,

    C1::beginMaybeReceive.t.Alt1 <- A1::beginMaybeReceive.t,
    C1::endMaybeReceive.t.Alt1 <- A1::endMaybeReceive.t,
    C1::beginMaybeSend.t.Alt1 <- A1::beginMaybeSend.t,
    C1::endMaybeSend.t.Alt1 <- A1::endMaybeSend.t,
    C1::beginPortClosed.t.Alt1 <- A1::beginPortClosed.t,
    C1::endPortClosed.t.Alt1 <- A1::endPortClosed.t
      | t <- ThreadID 
  ]]

System0 = A1::runWithAndHide(System01) \ A1::ChannelInterface

assert System0 :[divergence free]

assert not System0 :[deadlock free] 
-- deadlocks because all ChanThreads could choose to STOP

System = System0 \ {|A1::spuriousWakeup|} 

assert not System :[divergence free] -- diverges because of spurious wake ups

------ Specification for synchronisation linearisation.

-- In sync and altSync events, the sender comes first

-- Synchronisation between threads in Alt and channel, passing data value.
channel altSync : ThreadID . ThreadID . ChanID . Data

-- synchronsation between a sender and receiver
channel sync : ThreadID . ThreadID . ChanID . Data

-- channel closing linearization point
channel close: ThreadID . ChanID

-- linearisation point of a channel communication that throws a ClosedException
channel isClosed: ThreadID . ChanID

channel isAltClosed

-- Lineariser for the Alt thread.
AltLin(me) = 
ALTFLAG & 
  let inPorts = { c | InPortBranch.c <- set(branches) }
      outPorts = { c | OutPortBranch.c <- set(branches) } 
  within
  A1::beginAlt.me -> (
    altSync.me?other:ChanThreads?c:inPorts?x -> 
      A1::endAlt.me.AltReceive.index(InPortBranch.c).x -> AltLin(me)
    []
    altSync?other:ChanThreads!me?c:outPorts?x ->
      A1::endAlt.me.AltSend.index(OutPortBranch.c).x -> AltLin(me)
    []
    isAltClosed -> A1::endAlt.me.AltAbort -> AltLin(me)
  )

alphaAltLin(me) = union(
  {| A1::beginAlt.me, A1::endAlt.me, altSync.me, isAltClosed |},
  {| altSync.t.me | t <- ChanThreads |}
)

-- Specification object for a channel: keeps track of whether the channel is
-- closed, allowing appropriate events before and after.
ChanSpec(c) = 
  sync?_?_!c?_ -> ChanSpec(c) 
  [] altSync?_?_!c?_ -> ChanSpec(c) 
  [] close?_!c -> ChanSpecClosed(c)
ChanSpecClosed(c) =
  isClosed?_!c -> ChanSpecClosed(c) [] 
  isAltClosed ->  ChanSpecClosed(c) []  
  close?_!c -> ChanSpecClosed(c)
alphaChanSpecs = {| sync, altSync, close, isClosed, isAltClosed |} 

-- Lineariser for a channel thread.
ChanThreadLin(me) = 
  let Others = others(me) within
  C1::beginSend.me?x -> LinSending(me, x, c1, C1::endSend)
  []
  C1::beginReceive.me -> LinReceiving(me, c1, C1::endReceive)
  [] 
  C1::beginSendWithin.me?x -> LinSendingWithin(me, x, c1, C1::endSendWithin)
  []
  C1::beginReceiveWithin.me -> LinReceivingWithin(me, c1, C1::endReceiveWithin)
  []
  C1::beginClose.me -> close.me.c1 -> C1::endClose.me -> ChanThreadLin(me)

-- Thread me sending x on c; endSend.me will signal the end of the sending. 
LinSending(me, x, c, endSend) = 
  sync.me?other:others(me)!c!x -> endSend.me.SendSuccess -> ChanThreadLin(me)
  [] 
  altSync?altThread!me!c!x -> endSend.me.SendSuccess -> ChanThreadLin(me)
  [] 
  isClosed.me.c -> endSend.me.Closed -> ChanThreadLin(me)

-- Thread me receiving on c; endReceive.me will signal the end of the receive. 
LinReceiving(me, c, endReceive) = 
  sync?other:others(me)!me!c?x -> endReceive.me.ReceiveSuccess.x ->
    ChanThreadLin(me)
  [] 
  altSync.me?altThread!c?x -> endReceive.me.ReceiveSuccess.x -> ChanThreadLin(me)
  [] 
  isClosed.me.c -> endReceive.me.Closed -> ChanThreadLin(me)

-- Thread me within sendWithin(x) on c; endSendWithin.me will signal the end
-- of the sending.
LinSendingWithin(me, x, c, endSendWithin) = 
  LinSending(me, x, c, endSendWithin)
  [> endSendWithin.me.Timeout -> ChanThreadLin(me)

LinReceivingWithin(me, c, endReceiveWithin) = 
  LinReceiving(me, c, endReceiveWithin)
  [> endReceiveWithin.me.Timeout -> ChanThreadLin(me) 

-- Alphabet of ChanThreadLin(me)
alphaChanThreadLin(me) = {| 
  C1::beginSend.me, C1::endSend.me, C1::beginReceive.me, C1::endReceive.me, 
  C1::beginSendWithin.me, C1::endSendWithin.me,
  C1::beginReceiveWithin.me, C1::endReceiveWithin.me,
  C1::beginClose.me, C1::endClose.me,
  
  altSync.AltThread.me, altSync.me.AltThread, sync.me, sync.t.me, 
  close.me, isClosed.me |
    t <- diff(ThreadID,{me}) |}

Lin(me) = if me == AltThread then AltLin(me) else ChanThreadLin(me)

alphaLin(me) = 
  if me == AltThread then alphaAltLin(me) else alphaChanThreadLin(me)
  
-- Combine the linearisers to create the specification
Spec = (
  ( || t <- ThreadID @ [alphaLin(t)] Lin(t) ) 
  [| alphaChanSpecs |]
  ( [| { isAltClosed } |] c <- ChanID @ ChanSpec(c) )
) \ {| altSync, sync, close, isClosed, isAltClosed |}

assert Spec [T= System

assert Spec [F= System 
