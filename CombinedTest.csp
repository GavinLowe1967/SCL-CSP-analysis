-- A test on the combination of an alt and two channels.

-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2 --| T3 

-- others(t) = diff(ChanThreads, {t})

ChanThreads =  diff(ThreadID, {AltThread})

-- Identities of channels
datatype ChanID = Chan1 | Chan2 

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1 -- | Alt2

-- The list of branches in the alt.  Select one of the following.
-- branches =  <InPortBranch.Chan1, InPortBranch.Chan2>
branches =  <InPortBranch.Chan1, OutPortBranch.Chan2>
-- branches =  <OutPortBranch.Chan1, InPortBranch.Chan2>
-- branches =  <OutPortBranch.Chan1, OutPortBranch.Chan2>

size = length(branches)

Index = {0..size-1}

Strict = false

-- Execute P if Strict is set.  Used for optional assertions. 
IfStrict(P) = if Strict then P else SKIP

include "SyncChan.csp" 

-- Create two channels
instance C1 = SyncChan(ThreadID, AltID, Data, size)
instance C2 = SyncChan(ThreadID, AltID, Data, size)

include "Alt.csp"

-- Create the alt.
instance A1 = Alt(Alt1, branches, ThreadID, ChanID)

------ Threads

-- The thread that runs the Alt repeatedly. 

CLOSEFLAG = true --  not FLAG

TheAltThread(me) = RUN(A1::altInterface(AltThread))

-- Thread with identity me, which repeatedly calls operations.  In particular,
-- this prevents the thread from apparently having concurrent invocations on
-- both channels.
Thread(me) = 
  C1::beginSend.me?x -> C1::endSend.me?res -> Thread(me) 
  []
  C2::beginSend.me?x -> C2::endSend.me?res -> Thread(me)
  []
  C1::beginReceive.me -> C1::endReceive.me?res -> Thread(me)
  []
  C2::beginReceive.me -> C2::endReceive.me?res -> Thread(me)
  []
  C1::beginSendWithin.me?x -> C1::endSendWithin.me?b -> Thread(me)
  []
  C2::beginSendWithin.me?x -> C2::endSendWithin.me?b -> Thread(me)
  []
  C1::beginReceiveWithin.me -> C1::endReceiveWithin.me?ox -> Thread(me)
  []
  C2::beginReceiveWithin.me -> C2::endReceiveWithin.me?ox -> Thread(me)
  []
CLOSEFLAG & (
  C1::beginClose.me -> C1::endClose.me -> Thread(me)
  []
  C2::beginClose.me -> C2::endClose.me -> Thread(me)
)

Threads = (||| t <- ChanThreads @ Thread(t)) ||| TheAltThread(AltThread)

-- Put the system together

-- Run Threads with C1 and C2, and rename events to be consistent with the
-- alt.
System00 = C1::runWithClientsAndHide(C2::runWithClientsAndHide(Threads))

System01 = 
  System00 [[
    C1::beginRegisterIn.t.Alt1 <- A1::beginRegisterIn.t.Chan1,
    C1::endRegisterIn.t.Alt1 <- A1::endRegisterIn.t.Chan1,
    C1::beginDeregisterIn.t.Alt1 <- A1::beginDeregisterIn.t.Chan1,
    C1::endDeregisterIn.t.Alt1 <- A1::endDeregisterIn.t.Chan1,
    C1::beginRegisterOut.t.Alt1 <- A1::beginRegisterOut.t.Chan1,
    C1::endRegisterOut.t.Alt1 <- A1::endRegisterOut.t.Chan1,
    C1::beginDeregisterOut.t.Alt1 <- A1::beginDeregisterOut.t.Chan1,
    C1::endDeregisterOut.t.Alt1 <- A1::endDeregisterOut.t.Chan1,

    C1::beginMaybeReceive.t.Alt1 <- A1::beginMaybeReceive.t,
    C1::endMaybeReceive.t.Alt1 <- A1::endMaybeReceive.t,
    C1::beginMaybeSend.t.Alt1 <- A1::beginMaybeSend.t,
    C1::endMaybeSend.t.Alt1 <- A1::endMaybeSend.t,
    C1::beginPortClosed.t.Alt1 <- A1::beginPortClosed.t,
    C1::endPortClosed.t.Alt1 <- A1::endPortClosed.t,

    C2::beginRegisterIn.t.Alt1 <- A1::beginRegisterIn.t.Chan2,
    C2::endRegisterIn.t.Alt1 <- A1::endRegisterIn.t.Chan2,
    C2::beginDeregisterIn.t.Alt1 <- A1::beginDeregisterIn.t.Chan2,
    C2::endDeregisterIn.t.Alt1 <- A1::endDeregisterIn.t.Chan2,
    C2::beginRegisterOut.t.Alt1 <- A1::beginRegisterOut.t.Chan2,
    C2::endRegisterOut.t.Alt1 <- A1::endRegisterOut.t.Chan2,
    C2::beginDeregisterOut.t.Alt1 <- A1::beginDeregisterOut.t.Chan2,
    C2::endDeregisterOut.t.Alt1 <- A1::endDeregisterOut.t.Chan2,

    C2::beginMaybeReceive.t.Alt1 <- A1::beginMaybeReceive.t,
    C2::endMaybeReceive.t.Alt1 <- A1::endMaybeReceive.t,
    C2::beginMaybeSend.t.Alt1 <- A1::beginMaybeSend.t,
    C2::endMaybeSend.t.Alt1 <- A1::endMaybeSend.t,
    C2::beginPortClosed.t.Alt1 <- A1::beginPortClosed.t,
    C2::endPortClosed.t.Alt1 <- A1::endPortClosed.t
      | t <- ThreadID 
  ]]

System0 = A1::runWithAndHide(System01) \ A1::ChannelInterface

System = System0 \ {|A1::spuriousWakeup|} 

------ Specification for synchronisation linearisation.

-- Include the definitions needed for CombinedSpec.csp

beginAlt = A1::beginAlt
endAlt = A1::endAlt

-- Definitions of the ChanIDs and (CSP) channels used for beginning and ending
-- operations.
sendChans = {
  (Chan1, C1::beginSend, C1::endSend), (Chan2, C2::beginSend, C2::endSend)
}
receiveChans = {
  (Chan1, C1::beginReceive, C1::endReceive), 
  (Chan2, C2::beginReceive, C2::endReceive)
}
sendWithinChans =  {
  (Chan1, C1::beginSendWithin, C1::endSendWithin), 
  (Chan2, C2::beginSendWithin, C2::endSendWithin)
} 
receiveWithinChans = {
  (Chan1, C1::beginReceiveWithin, C1::endReceiveWithin), 
  (Chan2, C2::beginReceiveWithin, C2::endReceiveWithin)
}
closeChans = {
  (Chan1, C1::beginClose, C1::endClose), (Chan2, C2::beginClose, C2::endClose)
}

clientInterface(me) = union(C1::clientInterface(me), C2::clientInterface(me))

include "CombinedSpec.csp"

----- Main refinement tests

assert System0 :[divergence free]
-- Check requires ~250GB. 

assert not System0 :[deadlock free] 
-- deadlocks because all ChanThreads could choose to use the same port as the
-- alt.

assert not System :[divergence free] 
-- diverges because of spurious wake ups

assert Spec [T= System

assert Spec [F= System 

-- The following test keeps the spurious wakeups visible.

Spec1 = Spec ||| CHAOS({|A1::spuriousWakeup|})

-- assert Spec1 [F= System0  -- Same time as previous check
-- assert Spec1 [FD= System0 -- Slow...
-- Warning: above requires ~500GB of memory! 