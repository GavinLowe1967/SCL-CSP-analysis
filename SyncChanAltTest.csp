-- Test upon SyncChan

datatype ThreadID = T1 | T2 -- | T3 -- | T4
datatype AltID = Alt1 -- | Alt2

include "Types.csp"
include "SyncChanAlt.csp"

MaxIndex = 2

Index = {0 .. MaxIndex-1}

-- We'll test a single channel
instance c = SyncChan(ThreadID, AltID, Data, MaxIndex)

-- Signals before and after invocations or sends and receives
channel beginSend, endReceive, beginSendWithin : ThreadID . Data
channel beginReceive, beginReceiveWithin, endSend : ThreadID
channel endReceiveWithin : ThreadID . c::Option
channel endSendWithin: ThreadID . Bool

-- Signals for Alt interactions
-- Call registerIn, for the Alt to register with the channel. 
channel beginRegisterIn: ThreadID . AltID . Index
-- Return from registerIn
channel endRegisterIn: ThreadID . AltID . RegisterInResult
-- Successfully receive from Alt.
channel endAltReceive: ThreadID . AltID . Data
-- Begin to deregister from an Alt.
channel beginDeregisterIn, endDeregisterIn: ThreadID . AltID

-- Thread with identity me, performing a single operation: it either sends or
-- receives, or registers with the channel as an alt, or does nothing.
Thread0(me) = 
  beginSend.me?x -> c::Send(me, x); endSend.me -> SKIP
  |~|
  beginReceive.me -> c::Receive(me, \ x @ endReceive.me.x -> SKIP )
  |~|
  beginSendWithin.me?x -> c::SendWithin(me, x, \ b @ endSendWithin.me.b -> SKIP)
  |~|
  beginReceiveWithin.me -> 
    c::ReceiveWithin(me, \ ox @ endReceiveWithin.me.ox -> SKIP)
  |~|
  -- Alts
  beginRegisterIn.me?alt?index -> 
    c::RegisterIn(me, alt, index, ThreadRegisteringInAlt(me, alt, index))
  |~| 
  STOP

-- A thread calling registerIn on Alt alt with index index; wait for return.
ThreadRegisteringInAlt(me, alt, index)(rir) = 
  endRegisterIn.me.alt.rir -> ThreadInAltReceive(me, alt, index, rir)

-- A thread that has done a registerIn with alt, and received back a result.
ThreadInAltReceive(me, alt, index, RegisterInSuccess.x) = 
  endAltReceive.me.alt.x -> SKIP

-- Registering unsuccessful.  Wait for end (via callback). 
ThreadInAltReceive(me, alt, index, RegisterInWaiting) = 
  endAltReceive.me.alt?x -> SKIP
  []
  beginDeregisterIn.me.alt ->  c::DeregisterIn(me, alt, index)


-- A thread that repeatedly performs operations.
Thread(me) = Thread0(me); Thread(me)

Threads = ||| t <- ThreadID @ Thread(t)

-- A regulator to ensure multiple threads don't try to register an alt.
Reg = beginRegisterIn?t?a?index -> Reg'(t,a)
Reg'(t,a) = endRegisterIn.t.a.RegisterInSuccess?_ -> Reg
alphaReg = union(
  {|beginRegisterIn|}, 
  {|endRegisterIn.t.a.RegisterInSuccess | t <- ThreadID, a <- AltID|}
)

-- Process modelling the contract of an Alt.  This mediates between the thread
-- running the Alt, and callbacks from threads at the other end of a channel.

-- The Alt registers with the channel
AltReg(alt) = 
  |~| index : Index @
    beginRegisterIn?t!alt.index -> endRegisterIn.t.alt?rir -> 
    AltReg1(alt, t, index, rir)

-- The registration was successful, so the Alt returns.
AltReg1(alt, t, _, RegisterInSuccess.x) = endAltReceive.t.alt.x -> AltReg(alt)

-- Registering unsuccessful.  Wait for successful callback then end; or decide
-- to deregister.
AltReg1(alt, t, index, RegisterInWaiting) = 
  c::beginMaybeReceive?t1!alt.index?x -> (
    c::endMaybeReceive.t1.alt!true -> endAltReceive.t.alt.x -> AltReg(alt)
    [> beginDeregisterIn.t.alt -> AltReg2(alt, t, t1)
  )
  [>
  beginDeregisterIn.t.alt -> (
    endDeregisterIn.t.alt -> AltReg(alt)
    [] c::beginMaybeReceive?t1!alt?x -> AltReg2(alt, t, t1)
  )

-- Thread t is deregistering with alt; but t1 is attempting a callback.
AltReg2(alt, t, t1) = 
  c::endMaybeReceive.t1.alt!false -> endDeregisterIn.t.alt -> AltReg(alt)
  []
  endDeregisterIn.t.alt -> c::endMaybeReceive.t1.alt!false -> AltReg(alt)


alphaAlts = 
  {| beginRegisterIn, endRegisterIn, 
     c::beginMaybeReceive, c::endMaybeReceive, endAltReceive, 
     beginDeregisterIn, endDeregisterIn |}

Alts = ||| alt : AltID @ AltReg(alt)

-- Put system together

-- System ignoring the channel
System0 = 
  ((Threads [|alphaReg|] Reg) [|alphaAlts|] Alts) 
    \ {| endRegisterIn, endDeregisterIn, beginDeregisterIn |}

System = 
  c::runWithAndHide(System0) \ {| c::beginMaybeReceive, c::endMaybeReceive |}

assert System  :[divergence free]

-- Specification of synchronisation linearisation.

-- sync.t1.t2.x represents sender t1 and receiver t2 synchronising on the
-- sending of x.
channel sync : ThreadID . ThreadID . Data

-- A linearizer for thread me.
Linearizer(me) = 
  beginSend.me?x ->    -- Lin1(me, x) 
     sync.me?other!x -> endSend.me -> Linearizer(me)
  |~|
  beginReceive.me -> sync?other!me?x -> endReceive.me.x -> Linearizer(me)
  |~|
  beginSendWithin.me?x -> 
    (sync.me?other!x -> endSendWithin.me.true -> Linearizer(me)
     [> endSendWithin.me.false -> Linearizer(me))
  |~|
  beginReceiveWithin.me ->
    (sync?other!me?x -> endReceiveWithin.me.c::Some.x -> Linearizer(me)
     [> endReceiveWithin.me.(c::None) -> Linearizer(me))
  |~| 
  -- Alts
  beginRegisterIn.me?alt?_ -> (
    sync?other!me?x -> endAltReceive.me.alt.x -> Linearizer(me)
    [> Linearizer(me) -- offer withdrawn
  )
  |~|
  STOP

  
-- Alphabet of Linearizer(t)
alphaLin(t) = 
  {| beginSend.t, endSend.t, beginReceive.t, endReceive.t, 
     beginSendWithin.t, endSendWithin.t,
     beginReceiveWithin.t, endReceiveWithin.t, 
     beginRegisterIn.t, endAltReceive.t, beginDeregisterIn.t,
     sync.t.other, sync.other.t | 
       other <- diff(ThreadID,{t}) |} 

-- Specification of synchronisation linearisation.
Spec = (|| t <- ThreadID @ [alphaLin(t)] Linearizer(t)) \ {| sync|}

assert Spec [T= System
assert Spec [F= System 