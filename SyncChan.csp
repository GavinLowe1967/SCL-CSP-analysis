-- A module representing a synchronous channel. 

module SyncChan(ThreadID, AltID, Data, MaxIndex)
  include "Variable.csp"
  include "Macros.csp"

  -- Do we initialise Value to a specific value, arguing by symmetry?
  useSymmetry = false

  -- The "value" variable: the current or previous value.
  channel getValue, setValue: ThreadID.Data
  Value = 
    if useSymmetry then Var(head(seq(Data)), getValue, setValue)  
    else |~| x:Data @ Var(x, getValue, setValue) 

  -- The "status" variable: the current status of an exchange.
  datatype StatusT = Empty | Filled | Read
  channel getStatus, setStatus : ThreadID . StatusT
  Status = Var(Empty, getStatus, setStatus)

  -- The "isClosed" variable (actually "isChanClosed" in the implementation).
  channel getIsClosed, setIsClosed : ThreadID.Bool
  IsClosed = Var(false, getIsClosed, setIsClosed)

  -- macro for if(isClosed) P else Q
  IfClosed(me, P, Q) = getIsClosed.me?cl -> if cl then P else Q

  -- macro for checkOpen; P.  If the channel is closed, cont is applied to
  -- Closed.
  CheckOpen(me, cont, P) = IfClosed(me, cont(Closed), P)

  -- Experimental use of assertions

  -- AssertX(b) = if b then SKIP else assertionError -> DIV 
  AssertX(b) = Assert1(b)

  -- Number of threads
  N = card(ThreadID)

  -- The "receiversWaiting" variable
  channel getReceiversWaiting, setReceiversWaiting : ThreadID.{0..N}
  ReceiversWaiting = Var(0, getReceiversWaiting, setReceiversWaiting)

  -- macro for receiversWaiting += 1
  IncReceiversWaiting(me) = 
    getReceiversWaiting.me?r -> 
    Assert(r < N, setReceiversWaiting.me.r+1 -> SKIP)

  -- macro for receiversWaiting -= 1
  DecReceiversWaiting(me) =
    getReceiversWaiting.me?r -> 
    Assert(r > 0, setReceiversWaiting.me.r-1 -> SKIP)

  -- The altWaiting variable
  channel getAltWaiting, setAltWaiting : ThreadID.Bool
  AltWaiting = Var(false, getAltWaiting, setAltWaiting)

  Index = {0.. MaxIndex-1}

  -- Optionally an AltID.  The value NoAlt corresponds to null in the
  -- implementation.
  datatype OptAlt = NoAlt | SomeAlt.AltID.Index

  -- The "receivingAlt" variable
  channel getReceivingAlt, setReceivingAlt : ThreadID.OptAlt
  ReceivingAlt = Var(NoAlt, getReceivingAlt, setReceivingAlt)

  -- The "sendingAlt" variable
  channel getSendingAlt, setSendingAlt : ThreadID.OptAlt
  SendingAlt = Var(NoAlt, getSendingAlt, setSendingAlt)

  -- All variables

  Variables = 
    Status ||| Value ||| IsClosed ||| ReceiversWaiting ||| AltWaiting |||
    ReceivingAlt ||| SendingAlt

  varEvents = 
    {| getStatus, setStatus, getValue, setValue, 
       getReceiversWaiting, setReceiversWaiting, getIsClosed, setIsClosed,
       getAltWaiting, setAltWaiting,
       getReceivingAlt, setReceivingAlt, getSendingAlt, setSendingAlt |}

  -- Monitor and conditions
  datatype ConditionID = SlotFull | Continue | SlotEmptied | AltSlotEmptied

  include "MonitorCondition.csp"

  -- The signalSlotEmptied function
  SignalSlotEmptied(me) =   
    -- if(altWaiting) altSlotEmptied.signal() else slotEmptied.signal()
    getAltWaiting.me?aw ->
    if aw then MonitorCondition::Signal(me, AltSlotEmptied)
    else MonitorCondition::Signal(me, SlotEmptied)

  -------- Sending

  -- Thread me sends x.  The continuation expects a SendResult.
  Send :: (ThreadID, Data, (Result) -> Proc) -> Proc
  Send(me, x, cont) = MonitorCondition::MutexC(me, Send1(me, x), cont)

  -- slotEmptied.await(status == Empty || isClosed)
  Send1(me, x)(cont) = 
    let Test(k) = -- test of status == Empty || isClosed
          getStatus.me?s -> 
	  if s == Empty then k(true) else getIsClosed.me?cl -> k(cl) 
    within MonitorCondition::AwaitTest(me, SlotEmptied, Test); Send2(me, x, cont)

  -- checkOpen
  Send2(me, x, cont) = CheckOpen(me, cont, Send3(me, x, cont)) 

  -- if(tryAltReceive(x)) signalSlotEmptied() (and done) else ...
  Send3(me, x, cont) = 
    If(TryAltReceive(me, x), 
       SignalSlotEmptied(me); cont(SendSuccess), 
       Send4(me, x, cont))

  -- value = x; status = Filled; completeSend
  Send4(me, x, cont) = 
    setValue.me.x -> setStatus.me.Filled -> 
    If(CompleteSend(me), cont(SendSuccess), cont(Closed))

  -- completeSend: cont is a continuation that expects a boolean, with true
  -- representing success and false that the channel is closed.
  CompleteSend :: (ThreadID) -> ((Bool) -> Proc) -> Proc
  CompleteSend(me)(cont) = 
    -- maybeSignalToReceiver; continue.await() 
    MaybeSignalToReceiver(me); MonitorCondition::Await(me, Continue);
    -- if (status == Read) ...
    getStatus.me?s -> 
    if s == Read then      -- status = Empty; signalSlotEmptied()
      setStatus.me.Empty -> SignalSlotEmptied(me); cont(true) -- success
    else        
      -- assert(isClosed)
      getIsClosed.me?c -> Assert1(c); 
      -- if(receiversWaiting == 0) throw new Closed 
      getReceiversWaiting.me?rw ->
      if(rw == 0) then cont(false) else cont(true)

  -- maybeSignalToReceiver: if(receiversWaiting > 0) slotFull.signal()
  MaybeSignalToReceiver(me) = 
    getReceiversWaiting.me?r ->
    if r > 0 then MonitorCondition::Signal(me, SlotFull) else SKIP

  -- Timed sending

  -- Thread me does sendWithin(_)(x), and applies cont to it.
  -- SendWithin :: (ThreadID, Data, (SendWithinResult) -> Proc) -> Proc
  SendWithin :: (ThreadID, Data, (Result) -> Proc) -> Proc
  SendWithin(me, x, cont) = 
    MonitorCondition::MutexC(me, SendWithin1(me, x), cont)

  -- val timeout = !slotEmptied.awaitNanos(nanos, status == Empty || isClosed)
  SendWithin1(me, x)(cont) = 
    let Test(k) = -- test "status == Empty || isClosed"
          getStatus.me?s -> 
	  if s == Empty then k(true) else getIsClosed.me?c -> k(c) 
        Cont(b) = SendWithin2(me, x, cont, not b) -- continuation on result
    within MonitorCondition::TimedAwaitTest(me, SlotEmptied, Test, Cont)

  -- code after initial wait; checkOpen
  SendWithin2(me, x, cont, timedout) = 
    CheckOpen(me, cont, SendWithin3(me, x, cont, timedout))

  -- if(tryAltReceive(x)){ signalSlotEmptied(); true }
  SendWithin3(me, x, cont, timedout) = 
    if timedout then cont(Timeout) 
    else If(TryAltReceive(me, x), 
            SignalSlotEmptied(me); cont(SendSuccess),
            SendWithin4(me, x, cont))

  -- Final top-level branch; store value
  SendWithin4(me, x, cont) = 
    -- assert(status == Empty); value = x; status = Filled
    IfStrict(getStatus.me?s -> Assert1(s == Empty)); 
    setValue.me.x -> setStatus.me.Filled ->
    -- maybeSignalToReceiver 
    MaybeSignalToReceiver(me); 
    -- val success = continue.awaitNanos(deadline-nanoTime)
    MonitorCondition::TimedAwait(me, Continue, SendWithin5(me, x, cont))

  -- if(status == Read) ...
  SendWithin5(me, x, cont)(success) = 
    getStatus.me?s ->
    if s == Read then
      -- assert(success); status = Empty; signalSlotEmptied(); true
      Assert1(success); setStatus.me.Empty ->
      SignalSlotEmptied(me); cont(SendSuccess)
    else
      -- assert(status == Filled && value == x)
      Assert1(s == Filled); getValue.me?v -> Assert1(v == x);
      -- if(isClosed) ...
      IfClosed(me, 
        -- if(receiversWaiting == 0) throw new Closed else true 
        getReceiversWaiting.me?rw -> 
          if rw == 0 then cont(Closed) else cont(SendSuccess) ,
        -- else{ assert(!success); status = Empty; signalSlotEmptied(); false }
        Assert1(not success); setStatus.me.Empty -> SignalSlotEmptied(me); 
          cont(Timeout) 
      )

  -------- Receiving

  -- Thread me receives value.  The continuation expects to be given a
  -- ReceiveResult.
  Receive :: (ThreadID, (Result) -> Proc) -> Proc
  Receive(me, cont) = 
    MonitorCondition::MutexC(me, Receive1(me), cont)

  -- checkOpen; var result = tryAltSend
  Receive1(me)(cont) = 
    CheckOpen(me, cont, TryAltSend(me, \ res @ ReceiveLoop(me, cont, res)) )

  -- while(result.isEmpty && status != Filled){ ... }
  ReceiveLoop(me, cont, result) = 
    -- test guard of loop: result.isEmpty && status != Filled
    let Test(k) = 
      if result == None then getStatus.me?s -> k(s != Filled) else k(false)
    within 
    If(Test, ReceiveLoopBody(me, cont, result), Receive2(me, cont, result))

  -- Body of loop in receive.
  ReceiveLoopBody(me, cont, result) = 
    -- receiversWaiting += 1; slotFull.await(); receiversWaiting -= 1
    IncReceiversWaiting(me); MonitorCondition::Await(me, SlotFull);
    DecReceiversWaiting(me);
    -- if(status != Filled) ...
    getStatus.me?s -> 
    if s != Filled then TryAltSend(me, \ res @ ReceiveLoopBody2(me, cont, res))
    else ReceiveLoop(me, cont, result)

  -- if(result == None) checkOpen else go round the loop
  ReceiveLoopBody2(me, cont, result) = 
    if result == None then
      CheckOpen(me, cont, ReceiveLoop(me, cont, result))
      -- IfClosed(me, cont(Closed), ReceiveLoop(me, cont, result))
    else ReceiveLoop(me, cont, result)

  -- After loop.  result match{ ... }.
  Receive2(me, cont, Some.x) = cont(ReceiveSuccess.x)

  Receive2(me, cont, None) = CompleteReceive(me, \ v @ cont(ReceiveSuccess.v))

  -- completeReceive.  The continuation cont is applied to the value received.
  CompleteReceive :: (ThreadID, (Data) -> Proc) -> Proc 
  CompleteReceive(me, cont) = 
    setStatus.me!Read -> MonitorCondition::Signal(me, Continue); 
    getValue.me?v -> cont(v) 

  ---- receiveWithin

  -- Thread me does receiveWithin(_).  The continuation expects to be given a
  -- ReceiveWithinResult.
  ReceiveWithin :: (ThreadID, (Result) -> Proc) -> Proc
  ReceiveWithin(me, cont) = 
    MonitorCondition::MutexC(me, ReceiveWithin1(me), cont)

  -- checkOpen; var result = tryAltSend
  ReceiveWithin1(me)(cont) = 
    CheckOpen(me, cont, 
      TryAltSend(me, \ result @ ReceiveWithin2(me, cont, result)))

  -- if(result.isEmpty && status != Filled){ ... }
  ReceiveWithin2(me, cont, result) = 
    let Test(k) = 
      if result == None then getStatus.me?s -> k(s != Filled) else k(false)
    within If(Test, 
      -- receiversWaiting += 1; do{...}
      IncReceiversWaiting(me); ReceiveWithinLoopBody(me, cont, result),
      ReceiveWithinPostIf(me, cont, result, false) 
    )

  -- Body of do{...} loop: timeout = !slotFull.awaitNanos(deadline-nanoTime)
  ReceiveWithinLoopBody(me, cont, result) = 
    -- Below b represents the result of the awaitNanos. 
    MonitorCondition::TimedAwait(me, SlotFull, \b @ 
      ReceiveWithinLoopBody2(me, cont, result, not b))

  -- if(!timeout && status != Filled) ...
  ReceiveWithinLoopBody2(me, cont, result, timedout) = 
    let Test(k) = -- Test !timeout && status != Filled
      if not timedout then getStatus.me?s -> k(s != Filled) else k(false)
    within If(Test, 
      -- result = tryAltSend ...
      TryAltSend(me, \ res @ ReceiveWithinLoopBody3(me, cont, res, timedout)),
      ReceiveWithinLoopEnd(me, cont, result, timedout)
    )

  -- if(result == None && isClosed){ receiversWaiting -= 1; throw new Closed}
  ReceiveWithinLoopBody3(me, cont, result, timedout) =
    let Test(k) = 
      if result == None then getIsClosed.me?cl -> k(cl) else k(false)
    within If(Test, 
      DecReceiversWaiting(me); cont(Closed), 
      ReceiveWithinLoopEnd(me, cont, result, timedout) 
  )

  -- test at end of do loop
  ReceiveWithinLoopEnd(me, cont, result, timedout) = 
    let Test(k) = 
      if(result == None) then getStatus.me?s -> k(s != Filled and not timedout)
      else k(false)
    within If(Test, 
      ReceiveWithinLoopBody(me, cont, result),  -- go round the loop again
      -- receiversWaiting -= 1 ...
      DecReceiversWaiting(me); ReceiveWithinPostIf(me, cont, result, timedout)
    )

  -- Code after if(...){ ... }
  -- if(result.nonEmpty){ assert(!timeout); result }
  ReceiveWithinPostIf(me, cont, Some.x, timedout) =
    Assert1(not timedout); cont(ReceiveSuccess.x)

  -- else ... (result == None)
  ReceiveWithinPostIf(me, cont, None, timedout) = 
    -- if(status == Filled) Some(completeReceive)
    getStatus.me?s -> 
    if s == Filled then CompleteReceive(me, \ v @ cont(ReceiveSuccess.v))
    else   -- assert(timedout); checkOpen; None
      Assert1(timedout); CheckOpen(me, cont, cont(Timeout))

  ------------------ Closing of channel

  Close(me) =  MonitorCondition::Mutex(me, Close1(me))

  Close1(me) = 
    -- if(!isChanClosed) ...
    getIsClosed.me?cl -> if not cl then Close2(me) else SKIP -- closeLP.me -> SKIP

  Close2(me) = 
    -- isChanClosed = true
    setIsClosed.me.true -> 
    -- slotEmptied.signalAll();  altSlotEmptied.signal()
    -- slotFull.signalAll(); continue.signalAll()
    MonitorCondition::SignalAll(me, SlotEmptied);
    MonitorCondition::Signal(me, AltSlotEmptied);
    MonitorCondition::SignalAll(me, SlotFull);
    MonitorCondition::SignalAll(me, Continue);
    InformAltInPortClosed(me); InformAltOutPortClosed(me)

  -- informAltInPortClosed (in InPort.scala)
  InformAltInPortClosed(me) = 
    getReceivingAlt.me.NoAlt -> SKIP
    []
    getReceivingAlt.me.SomeAlt?alt.index -> ClosePort(me, alt, index);
      setReceivingAlt.me.NoAlt -> SKIP

  -- informAltOutPortClosed (in OutPort.scala)
  InformAltOutPortClosed(me) = 
    getSendingAlt.me.NoAlt -> SKIP
    []
    getSendingAlt.me.SomeAlt?alt.index -> ClosePort(me, alt, index);
      setSendingAlt.me.NoAlt -> SKIP

  -- call alt.portClosed
  ClosePort(me, alt, index) = 
    beginPortClosed.me.alt.index -> endPortClosed.me.alt -> SKIP

  ------------------ Interactions with Alts. 

  ----- tryAltReceive (in InPort.scala)

  -- Try to have current registered alt (if any) receive x.  Return true if
  -- successful.
  TryAltReceive :: (ThreadID, Data) -> ((Bool) -> Proc) -> Proc
  TryAltReceive(me, x)(cont) = 
    getReceivingAlt.me.SomeAlt?alt?index -> (
      -- assert(!canReceive); receivingAlt = null
      IfStrict(getStatus.me?s -> Assert1(s != Filled)); 
      setReceivingAlt.me.NoAlt ->
      -- alt.maybeReceive(x, index, iter); Try to have alt receive x.
      beginMaybeReceive.me.alt.index.x -> endMaybeReceive.me.alt?res -> cont(res)
    )
    []  
    getReceivingAlt.me.NoAlt -> cont(false) -- no registered alt

  ----- tryAltSend (in OutPort)
  -- Try to have current alt (if any) send a value.  
  TryAltSend(me, cont) = 
    getSendingAlt.me.SomeAlt?alt?index -> setSendingAlt.me.NoAlt ->
      -- Try to have alt send value
      beginMaybeSend.me.alt.index -> endMaybeSend.me.alt?res -> cont(res)
    []
    getSendingAlt.me.NoAlt -> cont(None)

  ----- registerIn/Out (in InPort.scala/OutPort.scala)

  -- Thread me, in an alt, does registerIn with continuation cont
  RegisterIn :: (ThreadID, AltID, Int, (RegisterResult) -> Proc) -> Proc
  RegisterIn(me, alt, index, cont) = 
    MonitorCondition::MutexC(me, RegisterIn1(me, alt, index), cont)

  -- checkCanRegisterIn
  RegisterIn1(me, alt, index)(cont) = 
    CheckNoAlts(me); RegisterIn2(me, alt, index, cont)

  -- Check no alts are registered: checkCanregisterIn/Out in Chan.scala
  CheckNoAlts(me) = 
    getReceivingAlt.me?a -> AssertX(a == NoAlt);
    getSendingAlt.me?a -> AssertX(a == NoAlt) 

  -- If(canReceive) ...; canReceive in SyncChan just reads full
  RegisterIn2(me, alt, index, cont) = 
    -- if(isClosed) RegisterClosed
    IfClosed(me, cont(RegisterClosed),
      -- if(canReceive) ... (defined in SyncChan as Status == Filled)
      getStatus.me?s -> 
      if s == Filled then
        -- val result = completeReceive; RegisterSuccess(result)
        CompleteReceive(me, \ v @ cont(RegisterSuccess.v))
      else -- receivingAlt = (alt,index); RegisterWaiting
        setReceivingAlt.me.(SomeAlt.alt.index) -> cont(RegisterWaiting) )

  -- Thread me, in an alt, does registerOut with continuation cont
  RegisterOut:: (ThreadID, AltID, Int, (RegisterResult) -> Proc) -> Proc
  RegisterOut(me, alt, index, cont) = 
    MonitorCondition::MutexC(me, RegisterOut1(me, alt, index), cont)

  -- checkCanRegisterOut; if(isClosedOut) RegisterClosed
  RegisterOut1(me, alt, index)(cont) = 
    CheckNoAlts(me); 
    IfClosed(me, cont(RegisterClosed), RegisterOut2(me, alt, index, cont))

  -- if(trySend(value)) ...
  RegisterOut2(me, alt, index, cont) =
    TrySend(me, RegisterOut3(me, alt, index, cont))

  -- Process the result of trySend
  RegisterOut3(me, alt, index, cont)(RegisterSuccess.x) = 
    cont(RegisterSuccess.x)
  RegisterOut3(me, alt, index, cont)(RegisterWaiting) = 
    setSendingAlt.me.(SomeAlt.alt.index) -> cont(RegisterWaiting)
  RegisterOut3(me, alt, index, cont)(RegisterClosed) = 
    cont(RegisterClosed)

  -- trySend(x).  Called by an alt within registerOut.  We replace the results
  -- true, false, ClosedException of the concrete code with
  -- RegisterSuccess, RegisterWaiting, RegisterClosed.
  TrySend :: (ThreadID, (RegisterResult) -> Proc) -> Proc
  TrySend(me, cont) =
    -- Maybe wait for the slot to be emptied
    let Test(k) = 
      -- test of status == Empty || receiversWaiting == 0 || isClosed
      getStatus.me?s -> 
      if s == Empty then k(true) 
      else 
        getReceiversWaiting.me?rw ->
        if rw == 0 then k(true) else getIsClosed.me?c -> k(c)
    within 
      -- assert(!altWaiting); altWaiting = true
      getAltWaiting.me?aw -> Assert1(not aw); setAltWaiting.me.true ->
      -- altSlotEmptied.await(...)
      MonitorCondition::AwaitTest(me, AltSlotEmptied, Test); 
      -- altWaiting = false; ...
      setAltWaiting.me.false -> TrySend1(me, cont)
  
  TrySend1 :: (ThreadID, (RegisterResult) -> Proc) -> Proc
  TrySend1(me, cont) =  
    -- if(receiversWaiting == 0) ...
    getReceiversWaiting.me?rw -> 
    if rw == 0 then 
      -- checkOpen
      IfClosed(me, cont(RegisterClosed),
        getStatus.me?s ->
        --  if(status == Empty) slotEmptied.signal()
        (if s == Empty then MonitorCondition::Signal(me, SlotEmptied) else SKIP);
        cont(RegisterWaiting) ) -- cont(false)
    else -- if(status == Empty) ... 
      getStatus.me?s -> 
      if s == Empty then 
        -- store value; decision point for value sent
        setValue.me$x -> setStatus.me.Filled -> 
	-- call completeSend, and assert that this succeeds
	CompleteSend(me)(\ res @ Assert1(res); cont(RegisterSuccess.x))
      else cont(RegisterClosed)

  ----- deregisterIn/Out

  -- Thread me in Alt alt performing a deregisterIn
  DeregisterIn :: (ThreadID, AltID, Int) -> Proc
  DeregisterIn(me, alt, index) = 
    MonitorCondition::Mutex(me, DeregisterIn1(me, alt, index))

  DeregisterIn1(me, alt, index) = 
    IfStrict(
      getReceivingAlt.me?a -> AssertX(a == (SomeAlt.alt.index) or a == NoAlt));
    setReceivingAlt.me.NoAlt -> SKIP

  DeregisterOut(me, alt, index) = 
    MonitorCondition::Mutex(me, DeregisterOut1(me, alt, index))

  DeregisterOut1(me, alt, index) = 
    IfStrict(
      getSendingAlt.me?a -> AssertX(a == (SomeAlt.alt.index) or a == NoAlt));
    setSendingAlt.me.NoAlt -> SKIP

  ---------- Threads

  -- A thread that performs operations, wrapping them in begin/end events
  Thread(me) = 
    beginSend.me?x -> Send(me, x, \ res @ endSend.me.res -> Thread(me))
    []
    beginReceive.me -> Receive(me, \ x @ endReceive.me.x -> Thread(me))
    [] 
    beginSendWithin.me?x -> 
      SendWithin(me, x, \ b @ endSendWithin.me.b -> Thread(me))
    []
    beginReceiveWithin.me ->
      ReceiveWithin(me, \ ox @ endReceiveWithin.me.ox -> Thread(me))
    []
    beginClose.me -> Close(me); endClose.me -> Thread(me)
    []
    beginRegisterIn.me?alt?index -> 
      RegisterIn(me, alt, index, \rir @ endRegisterIn.me.alt.rir -> Thread(me))
    [] 
    beginDeregisterIn.me?alt.index -> 
      (DeregisterIn(me, alt, index); endDeregisterIn.me.alt -> Thread(me))
    []
    beginRegisterOut.me?alt.index ->
      RegisterOut(me, alt, index, \ror @ endRegisterOut.me.alt.ror -> Thread(me))
    []
    beginDeregisterOut.me?alt.index -> 
      (DeregisterOut(me, alt, index); endDeregisterOut.me.alt -> Thread(me))

  Threads0 = ||| t : ThreadID @ Thread(t)
  Threads = if useSymmetry then Threads0 else  getValue?t?x -> Threads0
  -- Note: we have a dummy read of value here, to force the value to be chosen
  -- initially, as a state-space reduction trick.

  --------  All internal processes and events

  -- Internal processes and their events
  Internals = MonitorCondition::runWith(Threads [| varEvents |] Variables)

  internals = union(varEvents, MonitorCondition::events)

  -- Compression.  This creates a slight compilation bottleneck. 
  -- transparent diamond
  -- compress(P) = diamond(P)
  -- Internals0 = 
  --   compress(MonitorCondition::runWithAndHide(Threads)) [| varEvents |] Variables
  -- Internals = compress(Internals0 \ internals)

  -- Hide internals and compress.  Compression is a serious bottleneck. 
  transparent normal, sbisim, diamond
  compress(P) = P -- sbisim(diamond(P))
  -- Internals10 = compress((Threads [| varEvents |] Variables) \ varEvents)
  -- Internals1 = compress(MonitorCondition::runWithAndHide(Internals10))
  Internals10 = compress(MonitorCondition::runWithAndHide(Threads))
  Internals1 = (Internals10 [| varEvents |] Variables) \ varEvents

exports
  -- Definition of the interface of the channel.  Shared with ChanInterface.
  include "ChanInterface.csp"

  channel assertionError 

  ------ Administrative functions

  -- Run P with this channel
  runWith(P) = P [| Interface |] Internals

  -- Run P with this channel, and hide internals
  runWithAndHide(P) = runWith(P) \ internals
  -- runWithAndHide(P) = P [| Interface |] Internals1

  -- Run with P on the client interface, but leave the interface with alts
  -- open.
  runWithClientsAndHide(P) = (P [| ClientInterface |] Internals) \ internals

  -- Now version with explicit synchronisation point for receiver,
  -- linearisation point for closing
  -- channel SP
  -- channel closeLP : ThreadID

  -- runWithSP(P) = 
  --   runWith(P) 
  --   [[ MonitorCondition::signal.tr.Continue.ts <- SP | 
  --       tr <- ThreadID, ts <- ThreadID ]] 
  --   [[ setIsClosed.t.true <- closeLP.t | t <- ThreadID ]]
  --   \ internals -- diff(internals, LPs)

  -- The above isn't right, for the following reason.  Consider the following
  -- (1) a receiver waits; (2) a sender stores and signals on SlotFull; (3)
  -- the channel is closed; (4) the receiver collects the value and signals on
  -- Continue.  Then the claimed synchronisation point is after the channel is
  -- closed.  In this case, we want the SP earlier, say when the sender
  -- signals on SlotFull.  But in some cases, that value will be taken by a
  -- receiver that hasn't yet started.

endmodule