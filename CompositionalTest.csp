-- A test on the combination of an idealised alt and idealised channels. 

-- This file is expected to be included from a file that defines a specific
-- collection of channels.  More specifically: (0) A type ThreadID, including
-- AltThread; (1) a type ChanId; (2) a consistent definition of branches; (3)
-- IdealisedChans, defining the channels, probably using the mkChan function;
-- (4) processes ChanThread(t), probably using mkChanThread; (5)
-- ClientThreadInterface; (6) sets sendChans, receiveChans, sendWithinChans,
-- receiveWithinChans, closeChans and clientInterface, as for CombinedSpec.

ChanThreads =  diff(ThreadID, {AltThread})

-- -- Identities of channels
-- datatype ChanID = Chan0 | Chan1

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1

size = length(branches)

Index = {0..size-1}

-- Definition of IdealisedChan module.  Including file should make instances.

include "IdealisedChan.csp"

-- Create the idealised alt.

include "IdealisedAlt.csp"

transparent normal, sbisim, diamond

compress(P) = normal(P)
-- compress(P) = sbisim(diamond(P))

-- Function to rename an idealised channel to be consistent with IdealisedAlt.
-- Unfortunately the FDR module system doesn't allow us to parameterise the
-- function by the instance, so we need to pass in the channels separately.
mkChan(
  IdealisedChannel, Chan,
  beginRegisterIn, endRegisterIn, beginRegisterOut, endRegisterOut,
  beginDeregisterIn, endDeregisterIn, beginDeregisterOut, endDeregisterOut,
  beginMaybeReceive, endMaybeReceive, beginMaybeSend, endMaybeSend,
  beginPortClosed, endPortClosed
) = 
  compress(IdealisedChannel)[[
    beginRegisterIn.t.Alt1 <- IdealisedAlt::beginRegisterIn.t.Chan,
    endRegisterIn.t.Alt1 <- IdealisedAlt::endRegisterIn.t.Chan,
    beginRegisterOut.t.Alt1 <- IdealisedAlt::beginRegisterOut.t.Chan,
    endRegisterOut.t.Alt1 <- IdealisedAlt::endRegisterOut.t.Chan,
    beginDeregisterIn.t.Alt1 <- IdealisedAlt::beginDeregisterIn.t.Chan,
    endDeregisterIn.t.Alt1 <- IdealisedAlt::endDeregisterIn.t.Chan,
    beginDeregisterOut.t.Alt1 <- IdealisedAlt::beginDeregisterOut.t.Chan,
    endDeregisterOut.t.Alt1 <- IdealisedAlt::endDeregisterOut.t.Chan,
    beginMaybeReceive.t.Alt1 <- IdealisedAlt::beginMaybeReceive.t,
    endMaybeReceive.t.Alt1 <- IdealisedAlt::endMaybeReceive.t,
    beginMaybeSend.t.Alt1 <- IdealisedAlt::beginMaybeSend.t,
    endMaybeSend.t.Alt1 <- IdealisedAlt::endMaybeSend.t,
    beginPortClosed.t.Alt1 <- IdealisedAlt::beginPortClosed.t,
    endPortClosed.t.Alt1 <- IdealisedAlt::endPortClosed.t
      | t <- ThreadID ]]


-- The combination of the idealised channels and alts.
System00 = 
  IdealisedChans 
  [| IdealisedAlt::ChannelInterface |] 
  sbisim(diamond(IdealisedAlt::IdealisedAlt))

System0 = System00 \ IdealisedAlt::ChannelInterface

------ Threads that interact with the system

-- The alt thread; can allow arbitrary events from the interface.
TheAltThread = RUN(IdealisedAlt::altInterface(AltThread))

-- We define channel threads in a way that allows for fairly concise
-- definitions, overcoming shortcomings in the FDR module system.  We define
-- it in term of a set "pairs" of pairs (begins, ends), where begins
-- represents begin events on a particular channel, and end represents end
-- events on the same channel.  The process repeatedly performs a begin event
-- and then an end event for the same channel.  Note that the channel itself
-- ensures the begin and end events match.  This simply ensures that the
-- thread doesn't call operations on two channels concurrently.
mkChanThread(pairs) = 
  [] (begins, ends) <- pairs @  
   [] e: begins @ e -> [] e': ends @ e' -> mkChanThread(pairs) 

-- Including file is expected to define ChanThread(_) in terms of the above.

AllThreads = TheAltThread ||| (||| t <- ChanThreads @ ChanThread(t))

ThreadInterface = Union({ 
  IdealisedAlt::AltInterface, ClientThreadInterface
})

System = System0 [| ThreadInterface |]  AllThreads

-- Check no Error events happen.

-- Alphabet of System
Alpha = Union({ ThreadInterface, {| IdealisedAlt::spuriousWakeup |} })

assert CHAOS(Alpha) [T= System

------- Synchronisation linearisation

-- Include the definitions needed for CombinedSpec.csp

beginAlt = IdealisedAlt::beginAlt
endAlt = IdealisedAlt::endAlt

include "CombinedSpec.csp"

-- Main checks

assert System :[divergence free]

assert Spec [T= System \ {|IdealisedAlt::spuriousWakeup|}

assert Spec [F= System \ {|IdealisedAlt::spuriousWakeup|}

-- For FD check, we need to keep spuriousWakeups visible.

Spec1 = Spec ||| CHAOS({|IdealisedAlt::spuriousWakeup|})

-- Following replaced by lazy abstraction test, which is more efficient.
-- assert Spec1 [T= System
-- assert Spec1 [F= System 
-- assert Spec1 [FD= System 

-- Tests below are for timing purposes

-- assert Spec [FD= STOP -- ~9.0s

-- assert STOP [FD= System -- ~10.4s