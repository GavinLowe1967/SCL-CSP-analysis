-- A test on the combination of an idealised alt and two idealised channels. 
-- This keeps the sync events visible

-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2  | T3  | T4

--ChanThreads = diff(ThreadID, AltThread)

-- Identities of channels
datatype ChanID = Chan0 | Chan1

-- The list of branches in the alt
branches =  <InPortBranch.Chan0, OutPortBranch.Chan1>
-- branches =  <InPortBranch.Chan0, InPortBranch.Chan1>

include "CompositionalTest.csp"
-- Includes some refinement tests that won't hold here.

instance IC0 = IdealisedChan(size)

instance IC1 = IdealisedChan(size)

IdealisedChannel0 = mkChan(
  IC0::IdealisedChannelLP, Chan0, 
  IC0::beginRegisterIn, IC0::endRegisterIn, 
  IC0::beginRegisterOut, IC0::endRegisterOut,
  IC0::beginDeregisterIn, IC0::endDeregisterIn, 
  IC0::beginDeregisterOut, IC0::endDeregisterOut,
  IC0::beginMaybeReceive, IC0::endMaybeReceive, 
  IC0::beginMaybeSend, IC0::endMaybeSend,
  IC0::beginPortClosed, IC0::endPortClosed)

IdealisedChannel1 = mkChan(
  IC1::IdealisedChannelLP, Chan1, 
  IC1::beginRegisterIn, IC1::endRegisterIn, 
  IC1::beginRegisterOut, IC1::endRegisterOut,
  IC1::beginDeregisterIn, IC1::endDeregisterIn, 
  IC1::beginDeregisterOut, IC1::endDeregisterOut,
  IC1::beginMaybeReceive, IC1::endMaybeReceive, 
  IC1::beginMaybeSend, IC1::endMaybeSend,
  IC1::beginPortClosed, IC1::endPortClosed)

IdealisedChans = IdealisedChannel0 ||| IdealisedChannel1
-- A channel thread for IC0 and IC1

TheIdealisedAlt = IdealisedAlt::IdealisedAltLP

ChanThread(me) = mkChanThread({
  (IC0::clientBegins(me), IC0::clientEnds(me)),
  (IC1::clientBegins(me), IC1::clientEnds(me)) 
}) 

ClientThreadInterface = Union({ 
  IC0::ClientInterface, IC1::ClientInterface
})

-- Definitions of the ChanIDs and (CSP) channels used for beginning and ending
-- operations.
sendChans = {
  (Chan0, IC0::beginSend, IC0::endSend), (Chan1, IC1::beginSend, IC1::endSend) }
receiveChans = {
  (Chan0, IC0::beginReceive, IC0::endReceive), 
  (Chan1, IC1::beginReceive, IC1::endReceive) }
sendWithinChans = {
  (Chan0, IC0::beginSendWithin, IC0::endSendWithin), 
  (Chan1, IC1::beginSendWithin, IC1::endSendWithin) } 
receiveWithinChans = {
  (Chan0, IC0::beginReceiveWithin, IC0::endReceiveWithin), 
  (Chan1, IC1::beginReceiveWithin, IC1::endReceiveWithin) }
closeChans = {
  (Chan0, IC0::beginClose, IC0::endClose), 
  (Chan1, IC1::beginClose, IC1::endClose) }

clientInterface(me) = union(IC0::clientInterface(me), IC1::clientInterface(me))

-- Rename sync, close, timeout events to agree
SystemR0 = 
  System
    [[ IC0::sync.t1.t2 <- sync.t1.t2.Chan0, IC1::sync.t1.t2 <- sync.t1.t2.Chan1 |
         t1 <- ChanThreads, t2 <- ChanThreads ]] 
    [[ IC0::close.t <- close.t.Chan0, IC1::close.t <- close.t.Chan1,
       IC0::timeout.t <- timeout.t.Chan0, IC1::timeout.t <- timeout.t.Chan1 | 
         t <- ChanThreads ]] 

SystemR = 
  let HideSet = {| 
    IC0::registerInSync, IC1::registerInSync, IC0::registerOutSync, IC1::registerOutSync,
    IdealisedAlt::maybeReceive, IdealisedAlt::maybeSend, IdealisedAlt::spuriousWakeup |}
  within SystemR0 \ HideSet

-- Note: it's not possible to leave the isClosed events visible.  The
-- IdealisedChannels allow these events in more states than the spec, in
-- states where no thread would actually be testing this.

-- It's not possible to leave the altSync events visible.  If there are both a
-- sync and and altSync possible, the implementation chooses
-- nondeterministically, but the specification makes both available.

assert SpecLP [T= SystemR 
assert SpecLP [F= SystemR 

-- Now also leave altSync events visible.  Rename synchronisation points in system.

SystemR1 = SystemR0
    [[ IC0::registerInSync.t <- altSync.t.AltThread.Chan0,  
       IC1::registerInSync.t <- altSync.t.AltThread.Chan1,
       IC0::registerOutSync.t <- altSync.AltThread.t.Chan0,  
       IC1::registerOutSync.t <- altSync.AltThread.t.Chan1,
-- FIXME: the following should be in terms of branches
       IdealisedAlt::maybeReceive.t.0.x.true <- altSync.t.AltThread.Chan0.x,
       IdealisedAlt::maybeSend.t.1.Some.x <- altSync.AltThread.t.Chan1.x | 
         t <- ChanThreads, x <- Data ]] 

-- Transform SpecLP to make choices involving sync, altSync nondeterministic.

channel sync' : ThreadID . ThreadID . ChanID . Data
channel altSync' : ThreadID . ThreadID . ChanID . Data

SpecLP' = 
  let E = Union({ 
            ClientThreadInterface,
            IdealisedAlt::AltInterface,
            {|close,timeout|}
          })
      Reg = 
        sync'?xx -> sync.xx -> Reg [] altSync'?xx -> altSync.xx -> Reg
        [] ([] e : E @ e -> Reg)
  within
  (SpecLP1[[sync <- sync', altSync <- altSync']] [| union(E, {|sync',altSync'|}) |] Reg)
    \ {|sync',altSync'|}

assert SpecLP' [T= SystemR1 \ {|IdealisedAlt::spuriousWakeup|}
assert SpecLP' [F= SystemR1 \ {|IdealisedAlt::spuriousWakeup|}