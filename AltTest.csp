
datatype ThreadID = T1 | T2 -- | T3 -- | T4
-- Thread T1 will run the Alt; other threads will act on channels
datatype AltID = Alt1 -- | Alt2
datatype ChanID = c1 | c2

include "Types.csp"
include "Alt.csp"
include "Macros.csp"

instance A1 = Alt(Alt1, <c1,c2>, ThreadID, ChanID)

----- The thread that runs the Alt repeatedly. 

channel beginAlt : ThreadID
channel endAlt : ThreadID . {0,1} . Data

Thread0(me) = 
  beginAlt.me -> A1::Run(me, \ i,x @ endAlt.me.i.x -> A1::Reset(me))

Thread(me) = Thread0(me); Thread(me)

----- Process modelling the contract of a channel the Alt tries to receive on.

channel beginSend : diff(ThreadID,{T1}) . ChanID . Data

-- A single iteration of channel c.  Note: if this recurses back to itself,
-- then FDR gives an error concerning recursing through ";".
Channel0(c) = 
  (beginSend?t!c?x -> Channel1(c,x) |~| STOP)
  []
  A1::beginRegisterIn?t?alt!c?index ->
    A1::endRegisterIn.t.alt.c.RegisterInWaiting -> Channel'(c, alt, index)

-- Channel trying to send x
Channel1(c,x) =
  A1::beginRegisterIn?t1?alt!c?index ->
    A1::endRegisterIn.t1.alt.c.RegisterInSuccess.x -> SKIP 

-- Channel that has alt registered
Channel'(c,alt,index) = 
  DeregisterIn(c,alt,index)
  []
  (beginSend?t!c?x -> Channel''(c,alt,index,t,x) |~| STOP)

-- Be deregistered by alt with index, then terminate.
DeregisterIn(c,alt,index) = 
  A1::beginDeregisterIn?t!alt!c?index' ->
  (Assert1(index' == index); A1::endDeregisterIn.t.alt.c -> SKIP)

-- Channel has alt registered, and thread t is trying to send x
Channel''(c,alt,index,t,x) = 
  DeregisterIn(c,alt,index); Channel1(c,x)
  []
  A1::MaybeReceive(t, x, index, PostMaybeReceive(c,alt,index,x))

-- The channel has performed maybeReceive(x,index).  The final parameter
-- represents the result.
PostMaybeReceive(c,alt,index,x)(true) = SKIP
PostMaybeReceive(c,alt,index,x)(false) = 
  -- The attempt to send failed; the alt may still deregister with this.
  Channel1(c,x) 
  [] 
  DeregisterIn(c,alt,index); Channel1(c,x)

-- Channel with identity c. 
Channel(c) = Channel0(c); Channel(c)

-- TODO: allow beingSend and call back here

Channels = ||| c <- ChanID @ Channel(c)

alphaChannels = 
  {| A1::beginRegisterIn, A1::endRegisterIn, 
     A1::beginDeregisterIn, A1::endDeregisterIn |}

System0 = Thread(T1) [| alphaChannels |] Channels

System1 = A1::runWith(System0)

System2 = A1::runWithAndHide(System0)

System = System2 \ union(alphaChannels, {|A1::spuriousWakeUp|}) 

assert System2 :[divergence free] -- succeeds.

assert not System :[divergence free] -- diverges because of spurious wake ups

assert not System2 :[deadlock free]
-- Can deadlock if both channels could refuse to communicate.

------ Specification for synchronisation linearisation.

-- Synchronisation between thread in Alt and channel, passing data value.
channel sync : ThreadID . ChanID . Data

-- Lineariser of thread in Alt.
index(c) = if c==c1 then 0 else 1 -- index of c in list of branches
AltLin(me) = beginAlt.me -> sync.me?c?x -> endAlt.me.index(c).x -> AltLin(me)

-- Lineariser of thread sending on channel c.
ChanLin(c) = 
  beginSend?t!c?x -> sync.T1!c!x -> ChanLin(c) 
  |~| STOP

ChanLins = ||| c <- ChanID @ ChanLin(c)

Spec = (AltLin(T1) [| {| sync.T1 |} |] ChanLins) \ {| sync |}

assert Spec [T= System

assert Spec [F= System