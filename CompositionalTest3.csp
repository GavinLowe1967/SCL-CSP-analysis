-- A test on the combination of an idealised alt and two idealised channels. 


-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2  | T3 -- | T4

-- Identities of channels
datatype ChanID = Chan0 | Chan1 | Chan2

-- The list of branches in the alt
branches =  <InPortBranch.Chan0, OutPortBranch.Chan1, InPortBranch.Chan2>
-- branches =  <InPortBranch.Chan0, InPortBranch.Chan1>

include "CompositionalTest.csp"

-- Build the idealised channels, and rename to be compatible with the
-- idealised alt.

instance IC0 = IdealisedChan(size)

instance IC1 = IdealisedChan(size)

instance IC2 = IdealisedChan(size)

IdealisedChannel0 = mkChan(
  IC0::IdealisedChannel, Chan0, 
  IC0::beginRegisterIn, IC0::endRegisterIn, 
  IC0::beginRegisterOut, IC0::endRegisterOut,
  IC0::beginDeregisterIn, IC0::endDeregisterIn, 
  IC0::beginDeregisterOut, IC0::endDeregisterOut,
  IC0::beginMaybeReceive, IC0::endMaybeReceive, 
  IC0::beginMaybeSend, IC0::endMaybeSend,
  IC0::beginPortClosed, IC0::endPortClosed)

IdealisedChannel1 = mkChan(
  IC1::IdealisedChannel, Chan1, 
  IC1::beginRegisterIn, IC1::endRegisterIn, 
  IC1::beginRegisterOut, IC1::endRegisterOut,
  IC1::beginDeregisterIn, IC1::endDeregisterIn, 
  IC1::beginDeregisterOut, IC1::endDeregisterOut,
  IC1::beginMaybeReceive, IC1::endMaybeReceive, 
  IC1::beginMaybeSend, IC1::endMaybeSend,
  IC1::beginPortClosed, IC1::endPortClosed)

IdealisedChannel2 = mkChan(
  IC2::IdealisedChannel, Chan2, 
  IC2::beginRegisterIn, IC2::endRegisterIn, 
  IC2::beginRegisterOut, IC2::endRegisterOut,
  IC2::beginDeregisterIn, IC2::endDeregisterIn, 
  IC2::beginDeregisterOut, IC2::endDeregisterOut,
  IC2::beginMaybeReceive, IC2::endMaybeReceive, 
  IC2::beginMaybeSend, IC2::endMaybeSend,
  IC2::beginPortClosed, IC2::endPortClosed)

IdealisedChans = IdealisedChannel0 ||| IdealisedChannel1 ||| IdealisedChannel2

-- A channel thread for the idealised channels

ChanThread(me) = mkChanThread({
  (IC0::clientBegins(me), IC0::clientEnds(me)),
  (IC1::clientBegins(me), IC1::clientEnds(me)), 
  (IC2::clientBegins(me), IC2::clientEnds(me)) 
}) 

ClientThreadInterface = Union({ 
  IC0::ClientInterface, IC1::ClientInterface, IC2::ClientInterface
})

-- Definitions of the ChanIDs and (CSP) channels used for beginning and ending
-- operations.
sendChans = {
  (Chan0, IC0::beginSend, IC0::endSend), 
  (Chan1, IC1::beginSend, IC1::endSend), 
  (Chan2, IC2::beginSend, IC2::endSend) }
receiveChans = {
  (Chan0, IC0::beginReceive, IC0::endReceive), 
  (Chan1, IC1::beginReceive, IC1::endReceive), 
  (Chan2, IC2::beginReceive, IC2::endReceive) }
sendWithinChans = {
  (Chan0, IC0::beginSendWithin, IC0::endSendWithin), 
  (Chan1, IC1::beginSendWithin, IC1::endSendWithin), 
  (Chan2, IC2::beginSendWithin, IC2::endSendWithin) } 
receiveWithinChans = {
  (Chan0, IC0::beginReceiveWithin, IC0::endReceiveWithin), 
  (Chan1, IC1::beginReceiveWithin, IC1::endReceiveWithin), 
  (Chan2, IC2::beginReceiveWithin, IC2::endReceiveWithin) }
closeChans = {
  (Chan0, IC0::beginClose, IC0::endClose), 
  (Chan1, IC1::beginClose, IC1::endClose), 
  (Chan2, IC2::beginClose, IC2::endClose) }

clientInterface(me) = Union({
  IC0::clientInterface(me), IC1::clientInterface(me), IC2::clientInterface(me)
})