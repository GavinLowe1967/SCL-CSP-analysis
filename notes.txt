Components
----------

Macros.csp: various macros

Variable.csp: model of a variable

MonitorCondition.csp: blocks timeouts when another thread has the lock

JVMMonitor.csp: a JVM monitor

Types.csp: types shared between models, Data and RegisterInResult. 


SyncChan
--------

SyncChanV1.csp: model without alts.

SyncChanTest.csp: test on SyncChanV1

SyncChanAlt.csp: model including interaction with Alts. 

SyncChanAltTest: test on SyncChanAlt, modelling the contract of the Alt fairly
explicitly.

SyncChanAltTest2 -- I don't think this works.  Removed


Alt
---

Alt.csp: model of Alt

AltTest.csp: initial spec for Alt

AltTest2.csp: improved, but allows multiple threads to be treated as waiting
in completeSend.

AltTest3.csp: simplified, a single thread treated as waiting in completeSend.

CombinedTest
------------

CombinedTest.csp: File defining a family of tests on an Alt with two channels.

CombinedTest{II,IO,OI,OO}.csp: files instantiating CombinedTest s.t. the Alt
uses In/OutPorts of its channels.

-------------------------------------------------------

Assumptions on alt when analysing channel:

1. Calls to registerIn, registerOut follow the protocol

2. Each sync is either (a) begin a registerIn and a
registerOut...RegisterInSuccess, or (b) between a beginMaybeReceive and an
endMaybeReceive...true.

(1) could be captured in the spec by a component that diverges if the protocol
is broken.  We would still need the Thread processes to put begin/end events
around each call; but this wouldn't use the endAltReceive events, and would
not enforce the protocol. 


 ??? How does that capture the relationship between the calls to
c::RegisterIn and the beginRegisterIn/endRegisterIn events? 

Assumptions on channel when analysing alt:

1. Calls to registerIn, deregisterIn and maybeReceive follow the protocol (in
particular, maybeReceive happens only between a registerIn and a
deregisterIn).

2. Each sync is either (a) begin a registerIn and a
registerOut...RegisterInSuccess, or (b) between a beginMaybeReceive and an
endMaybeReceive...true.

Independently, the alt could be shown to follow the protocol on the assumption
that the channel does (i.e. the alt breaks protocol only if the channel has
already done so); and vice versa.  

-------------------------------------------------------

Interface with alts

For an alt receiving:

tryAltReceive * (InPort.scala)
registerIn * - done
deregisterIn *
informAltInPortClosed

behaviour of thread:

  beginTryAltReceive.me -> c::RegisterIn(me, regCont)

  where 

  regCont(RegisterInSuccess.x) = endTryAltReceive.me.Some.x -> SKIP

  regCont(RegisterInWaiting) = 
    c::DeregisterIn(me); endTryAltReceive.me.None -> SKIP
    |~|
    ??? ...  endTryAltReceive.me.Some.x -> SKIP

In Linearizer(me)

  beginSend.me?x -> SendLin(me, x)

  SendLin(me,x) = 
    sync.me?other!x -> endSend.me -> Linearizer(me)
    |~| tryAltReceive.me -> (
         sync.me?other!x  ->  endSend.me -> Linearizer(me)
         |~| SendLin(me,x) )


For an alt sending

tryAltSend
registerOut
deregisterOut
informAltOutPortClosed

In alts

maybeReceive *
maybeSend
portClosed


