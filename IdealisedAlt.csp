-- An idealised model of an alt.

-- This module assumes that the following are in scope: (1) the definitions in
-- Types.csp; (2) a definition of ThreadID, including AltThread, and a
-- corresponding definition of ChanThreads; (3) a definition of branches,
-- defining the branches of an alt; (4) A1, an instance of an Alt based on
-- branches and ThreadID.  The events of the exported definitions are taken
-- from A1.

module IdealisedAlt
  -- The number of branches
  size = length(branches)

  -- Indices of branches
  Index = {0..size-1}

  -- The n'th element of a sequence
  nth(xs, 0) = head(xs)
  nth(xs, n) = nth(tail(xs), n-1)

  --------- Linearisers for maybeReceive, maybeSend, portClosed
  
  -- Linearisation point for maybeReceive, maybeSend and portClosed, including
  -- erroneous calls.
  channel maybeReceive : ChanThreads.Index.Data.Bool
  channel maybeSend : ChanThreads.Index.Option
  channel portClosed : ChanThreads . Index
  channel maybeReceiveError, maybeSendError, portClosedError : ChanThreads.Index
  
  -- Lineariser for thread me
  Lin(me) = 
    (|~| x : Data @ 
       beginMaybeReceive.me?index.x -> LinMaybeReceive(me, index, x))
    |~|
    beginMaybeSend.me?index -> LinMaybeSend(me, index)
    |~|
    beginPortClosed.me?index -> LinPortClosed(me, index)
    |~|
    STOP
  
  -- Linearisation of a call to maybeReceive
  LinMaybeReceive(me, index, x) = 
    maybeReceive.me.index.x?res -> endMaybeReceive.me.res -> Lin(me)
    [] maybeReceiveError.me.index -> STOP
    [] (spuriousWakeup.me -> LinMaybeReceive(me, index, x) |~| STOP)
  
  -- Linearisation of a call to maybeSend
  LinMaybeSend(me, index) = 
    maybeSend.me.index?res -> endMaybeSend.me.res -> Lin(me)
    [] maybeSendError.me.index -> STOP
    [] (spuriousWakeup.me -> LinMaybeSend(me, index) |~| STOP)
  
  -- Linearisation of a call to portClosed
  LinPortClosed(me, index) = 
    portClosed.me.index -> endPortClosed.me -> Lin(me)
    [] portClosedError.me.index -> STOP
    [] (spuriousWakeup.me -> LinPortClosed(me, index) |~| STOP)
  
  alphaLin(me) =  {| 
    beginMaybeReceive.me, endMaybeReceive.me, 
    beginMaybeSend.me, endMaybeSend.me, 
    maybeReceive.me, maybeReceiveError, maybeSend.me, maybeSendError.me,
    beginPortClosed.me, endPortClosed.me, 
    portClosed.me, portClosedError.me,
    spuriousWakeup.me 
  |}
  
  Lins = ||| t <- ChanThreads @ Lin(t)
  
  alphaLins = Union({ alphaLin(t) | t <- ChanThreads })
  
  --------- Process that keeps track of registrations, and detects
  --------- out-of-protocol call backs.
  
  channel modellingError
  
  -- Check that test holds.  If not, it is a modelling error: performing
  -- modellingError in the spec will cause the refinement checks to fail.  This
  -- will also reduce the size of the specification process.
  expect(test, P) = if test then P else modellingError -> STOP 
  
  -- Signal from AltSpec that registration is starting
  channel beginRegister

  -- Linearisation points of registration
  channel registerIn, registerOut : ChanID . Index
  -- Linearisation points of deregistration
  channel deregisterIn, deregisterOut : ChanID . Index
  -- Linearisation point of a register detecting the channel is closed
  channel registerInClosed, registerOutClosed : ChanID . Index
  
  -- Channels for AltSpec to get a port to deregister, or to find that there is
  -- no more such.  This is necessary to capture the case where the AltThread
  -- decides to deregister a branch, but there's a concurrent callback from that
  -- branch.
  channel getToDeregisterIn, getToDeregisterOut : ChanID . Index
  channel deregisterDone
  
  -- Channel for AltSpec to indicate that it has finished registration.  The
  -- first Bool indicates whether it has successfully synchronised.  The second
  -- indicates whether all channels are closed.
  channel endRegister : Bool . Bool
  
  -- Channel to inform AltSpec that there has been a successful callback. 
  channel endWait : AltResult
  
  -- Information about what is registered for each index. 
  datatype RegInfo = NoReg | InPortReg.ChanID | OutPortReg.ChanID | Closed
  
  -- Selectors over RegInfo
  isInPortReg(InPortReg._) = true
  isInPortReg(_) = false
  
  isOutPortReg(OutPortReg._) = true
  isOutPortReg(_) = false
  
  -- Me maintain a map reg from Index to RegInfo, indicating the registration
  -- against each index.  Initially all have no registration.
  initRegMap = mapFromList(< (i, NoReg) | i <- <0..size-1> >)
  
  -- Given reg, the indices against which the alt is registered at an inport or
  -- outport.
  getInRegs(reg) = { i | i <- Index, isInPortReg(mapLookup(reg, i)) }
  getOutRegs(reg) = { i | i <- Index, isOutPortReg(mapLookup(reg, i)) }
  
  -- Are all ports closed in reg?
  allClosed(reg) = { i | i <- Index, mapLookup(reg, i) == Closed } == Index
  
  -- Process that keeps track of registrations, and detects out-of-protocol call
  -- backs.
  RegTracker = 
    beginRegister -> RegTracker1(initRegMap) 
    []
    -- Callbacks  would be outside of the protocol.
    maybeReceiveError?t?index -> STOP
    []
    maybeSendError?t?index -> STOP
    []
    portClosedError?t?index -> STOP
  
  -- Registration phase. 
  RegTracker1(reg) = 
    let inRegs = getInRegs(reg)
        outRegs = getOutRegs(reg)
    within
    registerIn?c?index -> expect( 
      nth(branches,index) == (InPortBranch.c) and mapLookup(reg, index) == NoReg,
      RegTracker1(mapUpdate(reg, index, InPortReg.c))
    )
    []
    registerOut?c?index -> expect( 
      nth(branches,index) == (OutPortBranch.c) and 
        mapLookup(reg, index) == NoReg,
      RegTracker1(mapUpdate(reg, index, OutPortReg.c))
    )
    [] 
    registerInClosed?c?index -> expect( 
      nth(branches,index) == (InPortBranch.c) and mapLookup(reg, index) == NoReg,
      RegTracker1(mapUpdate(reg, index, Closed))
    )
    [] 
    registerOutClosed?c?index -> expect( 
      nth(branches,index) == (OutPortBranch.c) and 
        mapLookup(reg, index) == NoReg,
      RegTracker1(mapUpdate(reg, index, Closed))
    )
    []
    -- AltSpec indicates end of registration
    let ac = allClosed(reg) within
    endRegister?found!ac -> (
      if ac then RegTracker 
      else if found then RegTracker2(reg) 
      else RegTracker3(reg)
    )
    -- []
    -- Block maybeReceive, maybeSend and port closed here; but calls from
    -- non-registered indices would be outside of the protocol.
--     maybeReceiveError?t?index:diff(Index,inRegs) -> STOP
--     []
--     maybeSendError?t?index:diff(Index,outRegs) -> STOP
--     []
-- -- false & -- FIXME ???
--     portClosedError?t?index:diff(Index,union(inRegs,outRegs)) -> STOP
  
  -- The alt has identified a branch to run.  Allow deregistration
  RegTracker2(reg) = 
    let inRegs = getInRegs(reg) 
        outRegs = getOutRegs(reg)
        allRegs = union(inRegs,outRegs)
    within
  -- Allow AltSpec to get an index to deregister
    ([] i : inRegs @ 
        let InPortReg.c = mapLookup(reg, i) within  
        getToDeregisterIn.c.i -> RegTracker2(reg)
    )
    []
    ([] i : outRegs @
        let OutPortReg.c = mapLookup(reg, i) within
        getToDeregisterOut.c.1 -> RegTracker2(reg)
    )
    []
  -- indicate deregistering done
    allRegs == {} & deregisterDone -> RegTracker -- reset
    []
  -- Deregister at index.
    deregisterIn?c?index -> (
      let ri = mapLookup(reg, index) within
      expect(ri == (InPortReg.c) or ri == NoReg or ri == Closed,
        RegTracker2(mapUpdate(reg, index, NoReg)) )
    )
    [] 
    deregisterOut?c?index -> (
      let ro = mapLookup(reg, index) within
      expect(ro == (OutPortReg.c) or ro == NoReg or ro == Closed,
        RegTracker2(mapUpdate(reg, index, NoReg)) )
    )
    []
  -- Call back of portClosed
    portClosed?t?index:allRegs -> RegTracker2(mapUpdate(reg, index, Closed))
      -- Note: shouldn't trigger AltAbort here
    []
    portClosedError?t?index:diff(Index,allRegs) -> STOP
    []
  -- Call back of maybeReceive gets result false here
    maybeReceive?t?index:inRegs?_!false -> 
      RegTracker2(mapUpdate(reg, index, NoReg)) -- remove from map
    []
  -- Similarly for maybeSend
    maybeSend?t?index:outRegs!None -> 
      RegTracker2(mapUpdate(reg, index, NoReg)) -- remove from map
    []
  -- Illegal callback
-- ??? 
    maybeReceiveError?t?index:diff(Index,inRegs) -> STOP
    []
    maybeSendError?t?index:diff(Index,outRegs) -> STOP
  
  -- The alt has finished registering, unsuccessfully.  Wait for a callback. 
  RegTracker3(reg) = 
    let inRegs = getInRegs(reg) 
        outRegs = getOutRegs(reg)
        allRegs = union(inRegs,outRegs)
    within
  -- Callbacks of maybeReceive and maybeSend, including erroneous ones
    maybeReceive?t?index:inRegs?x!true ->  -- callback succeeds
    endWait.AltReceive.index.x -> RegTracker2(mapUpdate(reg, index, NoReg))
    []
    maybeReceiveError?t?index:diff(Index,inRegs) -> STOP
    []
    (|~| x : Data @ 
       maybeSend?t?index:outRegs!Some.x -> 
       endWait.AltSend.index.x -> RegTracker2(mapUpdate(reg, index, NoReg)) 
    )
    []
    maybeSendError?t?index:diff(Index,outRegs) -> STOP
    []
  -- Callbacks of portClosed; if all ports are closed, inform the AltSpec. 
    portClosed?t?index:allRegs -> ( 
      let reg' = mapUpdate(reg, index, Closed) within
      if allClosed(reg') then endWait.AltAbort -> RegTracker 
      else RegTracker3(mapUpdate(reg, index, Closed))
    )
    []
    portClosedError?t?index:diff(Index,allRegs) -> STOP
  
  alphaRegTracker = {| 
    beginRegister,
    registerIn, registerOut, registerInClosed, registerOutClosed, endRegister, 
    getToDeregisterIn, getToDeregisterOut, deregisterDone, 
    deregisterIn, deregisterOut, 
    maybeReceive, maybeReceiveError, maybeSend, maybeSendError, 
    portClosed, portClosedError,
    endWait, modellingError 
  |}
    
  -------------- The main thread of the alt
  
  AltSpec = 
    beginAlt.AltThread -> beginRegister -> Register(0)
    |~| STOP
  
  -- Register with branches [i..).  registered records those already registered.
  Register(i) = 
    if i == size then endRegister.false?ac -> (
      if ac then endAlt.AltThread.AltAbort -> AltSpec else Waiting
    ) 
    else Register1(i, nth(branches, i))
  
  -- Register with the i'th branch, and continue
  Register1(i, InPortBranch.c) = 
    beginRegisterIn.AltThread.c.i -> (
      endRegisterIn.AltThread.c.RegisterInSuccess?x -> 
      endRegister.true?_ -> Deregister(AltReceive.i.x)
      []
      endRegisterIn.AltThread.c.RegisterInWaiting -> 
      registerIn.c.i -> Register(i+1)
      []
      endRegisterIn.AltThread.c.RegisterInClosed -> 
      registerInClosed.c.i -> Register(i+1)
    )
  
-- FIXME: the registerIn ought to happen before the endRegisterIn.  It's valid
-- to get a callback before the endRegisterIn (although the callback will be
-- blocked).

  Register1(i, OutPortBranch.c) =
    beginRegisterOut.AltThread.c.i -> (
      endRegisterOut.AltThread.c.RegisterOutSuccess?x ->
      endRegister.true?_ -> Deregister(AltSend.i.x)
      []
      endRegisterOut.AltThread.c.RegisterOutWaiting -> 
      registerOut.c.i -> Register(i+1)
      []
      endRegisterOut.AltThread.c.RegisterOutClosed -> 
      registerOutClosed.c.i -> Register(i+1)
    )
  
  -- Deregister all registered ports, then return result
  Deregister(result) =
    getToDeregisterIn?c.i -> 
    beginDeregisterIn.AltThread.c.i -> deregisterIn.c.i -> 
    endDeregisterIn.AltThread.c -> Deregister(result)
    []
    getToDeregisterOut?c.i ->
    beginDeregisterOut.AltThread.c.i -> deregisterOut.c.i -> 
    endDeregisterOut.AltThread.c -> Deregister(result)
    []
    deregisterDone -> endAlt.AltThread.result -> AltSpec
  
  -- Registration failed to synchronise.  Wait until there is a successful
  -- callback.
  Waiting = 
    endWait?result -> (
      if result == AltAbort then endAlt.AltThread.result -> AltSpec
      else Deregister(result)
    )
    []
    (spuriousWakeup.AltThread -> Waiting |~| STOP)
   
  alphaAltSpec = {|
    beginAlt, endAlt, beginRegister,
    beginRegisterIn, endRegisterIn, registerIn, registerInClosed,
    beginDeregisterIn, endDeregisterIn, deregisterIn,
    beginRegisterOut, endRegisterOut, registerOut, registerOutClosed,
    beginDeregisterOut, endDeregisterOut, deregisterOut,
    endRegister, getToDeregisterIn, getToDeregisterOut, deregisterDone, 
    endWait, spuriousWakeup.AltThread 
  |}
  
  -------- Combined spec
  
  transparent normal
  
  -- Combine AltSpec and RegTracker
  Spec00 = 
    let internals = {| 
      beginRegister,
      registerIn, registerOut, registerInClosed, registerOutClosed, endRegister, 
      getToDeregisterIn, getToDeregisterOut,
      deregisterDone, deregisterIn, deregisterOut, endWait 
    |}
    within (AltSpec [ alphaAltSpec || alphaRegTracker ] RegTracker) \ internals
  
  -- Add Lins
  Spec0 = 
    Spec00 [ union(alphaAltSpec, alphaRegTracker) || alphaLins ] Lins
  
  -- Error events
  Errors = {| maybeReceiveError, maybeSendError, portClosedError |}
  
exports

  -- The interface.  Shared with an Alt
  include "AltInterface.csp"

  channel spuriousWakeup : ThreadID

  -- Specification, with error events visible.
  IdealisedAltSpec = Spec0 \ {| maybeReceive, maybeSend, portClosed |}
  
  -- If an error event happens, allow arbitrary behaviour.  The definitions
  -- are different for the stable failures and failures-divergences models.
  SpecF =  
    let events = union(Interface, {|spuriousWakeup|}) within
    ( IdealisedAltSpec [| Errors |> CHAOS(events) ) \ Errors
  -- Normalisation of the above takes a long time, because of the CHAOS(events)
  
  SpecD =  ( IdealisedAltSpec [| Errors |> DIV ) \ Errors
  
endmodule