-- An idealised model of an alt.

-- This module assumes that the following are in scope: (1) the definitions in
-- Types.csp; (2) a definition of ThreadID, including AltThread, and a
-- corresponding definition of ChanThreads; (3) a definition of branches,
-- defining the branches of an alt; (4) A1, an instance of an Alt based on
-- branches and ThreadID.  The events of the exported definitions are taken
-- from A1.

module IdealisedAlt
  -- The number of branches
  size = length(branches)

  -- Indices of branches
  Index = {0..size-1}

  -- The n'th element of a sequence
  nth(xs, 0) = head(xs)
  nth(xs, n) = nth(tail(xs), n-1)

  --------- Linearisers for maybeReceive, maybeSend, portClosed
  
  -- Linearisation point for maybeReceive, maybeSend and portClosed, including
  -- erroneous calls.
  --channel maybeReceive : ChanThreads.Index.Data.Bool
  --channel maybeSend : ChanThreads.Index.Option
  channel portClosed : ChanThreads . Index
  channel maybeReceiveError, maybeSendError, portClosedError : ChanThreads.Index
  
  -- Lineariser for thread me
  Lin(me) = 
    beginMaybeReceive.me?index?x -> LinMaybeReceive(me, index, x)
    []
    beginMaybeSend.me?index -> LinMaybeSend(me, index)
    []
    beginPortClosed.me?index -> LinPortClosed(me, index)
  
  -- Linearisation of a call to maybeReceive
  LinMaybeReceive(me, index, x) = 
    maybeReceive.me.index.x?res -> endMaybeReceive.me.res -> Lin(me)
    [] maybeReceiveError.me.index -> STOP
--    [] (spuriousWakeup.me -> LinMaybeReceive(me, index, x) |~| STOP)
  
  -- Linearisation of a call to maybeSend
  LinMaybeSend(me, index) = 
    maybeSend.me.index?res -> endMaybeSend.me.res -> Lin(me)
    [] maybeSendError.me.index -> STOP
--    [] (spuriousWakeup.me -> LinMaybeSend(me, index) |~| STOP)
  
  -- Linearisation of a call to portClosed
  LinPortClosed(me, index) = 
    portClosed.me.index -> endPortClosed.me -> Lin(me)
    [] portClosedError.me.index -> STOP
--    [] (spuriousWakeup.me -> LinPortClosed(me, index) |~| STOP)
  
  CallBackLPs = {|
    maybeReceive, maybeReceiveError, maybeSend, maybeSendError,
    portClosed, portClosedError
  |}
  
  Lins = ||| t <- ChanThreads @ Lin(t)
  
  alphaLins = Union({ 
    CallBackEvents, CallBackLPs -- , { spuriousWakeup.t | t <- ChanThreads }
  })
  
  --------- Process that keeps track of registrations, and detects
  --------- out-of-protocol call backs.

  -- Note: this separation from the AltLin process makes it easier to handle
  -- callbacks part way through a registration or deregistration.
  
  channel modellingError
  
  -- Check that test holds.  If not, it is a modelling error: performing
  -- modellingError in the spec will cause the refinement checks to fail.  This
  -- will also reduce the size of the specification process.
  expect(test, P) = if test then P else modellingError -> STOP 

  -- Assuming S is a singleton set, apply P to its member.
  extractSingle(S, P) = 
    if card(S) == 1 then let {x} = S within P(x) else modellingError -> STOP

  -- The indexes of branches matching port
  branchesFor(port) = { i | i <- Index, nth(branches,i) == port }
  
  -- Signal from AltLin that registration is starting
  channel beginRegistration
  
  -- Channels for AltLin to get a port to deregister, or to find that there is
  -- no more such.  This is necessary to capture the case where the AltThread
  -- decides to deregister a branch, but there's a concurrent callback from that
  -- branch.
  channel getToDeregisterIn, getToDeregisterOut : ChanID . Index
  channel deregisterDone
  
  -- Channel for AltLin to indicate that it has finished registration.  The
  -- Bool indicates whether all channels are closed.
  channel endRegistration : Bool 
  
  -- Channel to inform AltLin that there has been a successful callback. 
  channel endWait : AltResult
  
  -- Information about what is registered for each index. 
  datatype RegInfo = NoReg | InPortReg.ChanID | OutPortReg.ChanID | Closed
  
  -- Selectors over RegInfo
  isInPortReg(InPortReg._) = true
  isInPortReg(_) = false
  
  isOutPortReg(OutPortReg._) = true
  isOutPortReg(_) = false
  
  -- Me maintain a map reg from Index to RegInfo, indicating the registration
  -- against each index.  Initially all have no registration.
  initRegMap = mapFromList(< (i, NoReg) | i <- <0..size-1> >)
  
  -- Given reg, the indices against which the alt is registered at an inport or
  -- outport.
  getInRegs(reg) = { i | i <- Index, isInPortReg(mapLookup(reg, i)) }
  getOutRegs(reg) = { i | i <- Index, isOutPortReg(mapLookup(reg, i)) }
  
  -- Are all ports closed in reg?
  allClosed(reg) = { i | i <- Index, mapLookup(reg, i) == Closed } == Index

  -- Indices in reg corresponding to regInfo.
  matchesFor(reg, regInfo) = { i | i <- Index, mapLookup(reg, i) == regInfo }

  indexFor(branch) = 
    let get({x}) = x within get(branchesFor(branch))
  
  -- Process that keeps track of registrations, and detects out-of-protocol call
  -- backs.
  RegTracker = 
    beginRegistration -> RegTracker1(initRegMap) 
    []
    -- Callbacks would be outside of the protocol.
    maybeReceiveError?t?index -> STOP
    []
    maybeSendError?t?index -> STOP
    []
    portClosedError?t?index -> STOP
  
  -- Registration phase. 
  RegTracker1(reg) = 
    endRegisterIn.AltThread?c!RegisterWaiting -> 
      RecordReg(reg, InPortBranch.c, InPortReg.c)
    []
    endRegisterOut.AltThread?c!RegisterWaiting -> 
      RecordReg(reg, OutPortBranch.c, OutPortReg.c)
    [] 
    endRegisterIn.AltThread?c!RegisterClosed -> 
      RecordClosed(reg, InPortBranch.c)
    [] 
    endRegisterOut.AltThread?c!RegisterClosed -> 
      RecordClosed(reg, OutPortBranch.c)
    []
    endRegisterIn.AltThread?c!RegisterSuccess?x -> RegTracker2(reg)
    []
    endRegisterOut.AltThread?c!RegisterSuccess?x -> RegTracker2(reg)
    []
    -- AltLin indicates end of registration
    let ac = allClosed(reg) within
    endRegistration!ac -> (if ac then RegTracker else RegTracker3(reg))
    -- Block maybeReceive, maybeSend and port closed here. 

  -- Record a registration corresponding to branch and portReg, and continue
  -- to allow registering
  RecordReg(reg, branch, portReg) = 
    extractSingle(
      branchesFor(branch), 
      \ index @ expect( 
        mapLookup(reg, index) == NoReg,
        RegTracker1(mapUpdate(reg, index, portReg))
      )
    ) 
  -- Note: within the context of the complete IdealisedAlt, the above
  -- construction avoids the modellingError branches in extractSingle and
  -- expect.  But compilation will fail if we try replacing them with the FDR
  -- error construct.

  -- Record that portReg is closed, and continue to allow registering
  RecordClosed(reg, branch) = RecordReg(reg, branch, Closed)
  
  -- The alt has identified a branch to run.  Allow deregistration
  RegTracker2(reg) = 
    let inRegs = getInRegs(reg) 
        outRegs = getOutRegs(reg)
        allRegs = union(inRegs,outRegs)
    within
  -- Allow AltLin to get an index to deregister
    ( [] i : inRegs @ let InPortReg.c = mapLookup(reg, i) within  
        getToDeregisterIn.c.i -> RegTracker2(reg) )
    []
    ( [] i : outRegs @ let OutPortReg.c = mapLookup(reg, i) within
        getToDeregisterOut.c.1 -> RegTracker2(reg) )
    []
  -- indicate deregistering done
    allRegs == {} & deregisterDone -> RegTracker -- reset
    []
  -- Deregister at some port.
    endDeregisterIn.AltThread?c -> RecordDereg(reg, InPortReg.c)
    [] 
    endDeregisterOut.AltThread?c -> RecordDereg(reg, OutPortReg.c)
    []
  -- Call back of portClosed
    portClosed?t?index:allRegs -> RegTracker2(mapUpdate(reg, index, Closed))
      -- Note: shouldn't trigger AltAbort here
    []
    portClosedError?t?index:diff(Index,allRegs) -> STOP
    []
  -- Call back of maybeReceive gets result false here
    maybeReceive?t?index:inRegs?_!false -> 
      RegTracker2(mapUpdate(reg, index, NoReg)) -- remove from map
    []
  -- Similarly for maybeSend
    maybeSend?t?index:outRegs!None -> 
      RegTracker2(mapUpdate(reg, index, NoReg)) -- remove from map
    []
  -- Illegal callback
    maybeReceiveError?t?index:diff(Index,inRegs) -> STOP
    []
    maybeSendError?t?index:diff(Index,outRegs) -> STOP

  -- Update reg based on portReg being deregistered
  RecordDereg(reg, portReg) = 
    let matches = matchesFor(reg, portReg) within 
    if matches == {} then RegTracker2(reg)
    else extractSingle(matches, 
      \index @ RegTracker2(mapUpdate(reg, index, NoReg)))
  
  -- The alt has finished registering, unsuccessfully.  Wait for a callback. 
  RegTracker3(reg) = 
    let inRegs = getInRegs(reg) 
        outRegs = getOutRegs(reg)
        allRegs = union(inRegs,outRegs)
    within
  -- Callbacks of maybeReceive and maybeSend, including erroneous ones
    maybeReceive?t?index:inRegs?x!true ->  -- callback succeeds
    endWait.AltReceive.index.x -> RegTracker2(mapUpdate(reg, index, NoReg))
    []
    maybeReceiveError?t?index:diff(Index,inRegs) -> STOP
    []
    (|~| x : Data @ 
       maybeSend?t?index:outRegs!Some.x -> 
       endWait.AltSend.index.x -> RegTracker2(mapUpdate(reg, index, NoReg)) 
    )
    []
    maybeSendError?t?index:diff(Index,outRegs) -> STOP
    []
  -- Callbacks of portClosed; if all ports are closed, inform the AltLin. 
    portClosed?t?index:allRegs -> ( 
      let reg' = mapUpdate(reg, index, Closed) within
      if allClosed(reg') then endWait.AltAbort -> RegTracker 
      else RegTracker3(reg')
    )
    []
    portClosedError?t?index:diff(Index,allRegs) -> STOP
  
  alphaRegTracker = Union({
    CallBackLPs,  -- Synchronisation with Lin(t)s
    {| -- Externals
       endRegisterIn, endRegisterOut, endDeregisterIn, endDeregisterOut,
       -- Internal synchronisations with AltLin
       beginRegistration, endRegistration, endWait, 
       getToDeregisterIn, getToDeregisterOut, deregisterDone, 
       -- other
       modellingError 
    |}
  })
    
  -------------- The main thread of the alt
  
  AltLin = beginAlt.AltThread -> beginRegistration -> Register(0)
  
  -- Register with branches [i..).  registered records those already registered.
  Register(i) = 
    if i == size then endRegistration?ac -> (
      if ac then endAlt.AltThread.AltAbort -> AltLin else Waiting
    ) 
    else Register1(i, nth(branches, i))
  
  -- Register with the i'th branch, and continue
  Register1(i, InPortBranch.c) = 
    beginRegisterIn.AltThread.c.i -> (
      endRegisterIn.AltThread.c.RegisterSuccess?x -> Deregister(AltReceive.i.x)
      []
      endRegisterIn.AltThread.c.RegisterWaiting -> Register(i+1)
      []
      endRegisterIn.AltThread.c.RegisterClosed -> Register(i+1)
    )

  Register1(i, OutPortBranch.c) =
    beginRegisterOut.AltThread.c.i -> (
      endRegisterOut.AltThread.c.RegisterSuccess?x -> Deregister(AltSend.i.x)
      []
      endRegisterOut.AltThread.c.RegisterWaiting -> Register(i+1)
      []
      endRegisterOut.AltThread.c.RegisterClosed -> Register(i+1)
    )
  
  -- Deregister all registered ports, then return result
  Deregister(result) =
    getToDeregisterIn?c.i -> beginDeregisterIn.AltThread.c.i -> 
    endDeregisterIn.AltThread.c -> Deregister(result)
    []
    getToDeregisterOut?c.i -> beginDeregisterOut.AltThread.c.i ->
    endDeregisterOut.AltThread.c -> Deregister(result)
    []
    deregisterDone -> endAlt.AltThread.result -> AltLin
  
  -- Registration failed to synchronise.  Wait until there is a successful
  -- callback.
  Waiting = 
    endWait?result -> (
      if result == AltAbort then endAlt.AltThread.result -> AltLin
      else Deregister(result)
    )
    []
    (spuriousWakeup.AltThread -> Waiting |~| STOP)
   
  alphaAltLin = Union({
    AltInterface,
    RegistrationEvents, 
    {| beginRegistration, endRegistration, 
       getToDeregisterIn, getToDeregisterOut, deregisterDone, 
       endWait, spuriousWakeup.AltThread 
  |}
})
  
  -------- Combined spec
  
  -- transparent normal
  
  -- Combine AltLin and RegTracker
  Spec00 = 
    let internals = {| 
      beginRegistration, endRegistration, 
      getToDeregisterIn, getToDeregisterOut, deregisterDone, endWait 
    |}  
    within (AltLin [ alphaAltLin || alphaRegTracker ] RegTracker) \ internals
  
  -- Add Lins
  Spec0 = 
    normal(Spec00) [ union(alphaAltLin, alphaRegTracker) || alphaLins ] Lins

  -- Construct in different way
  Spec10 = 
    (AltLin [ alphaAltLin || alphaRegTracker ] RegTracker)
    [ union(alphaAltLin, alphaRegTracker) || alphaLins ] 
    Lins
  
  -- Error events
  Errors = {| maybeReceiveError, maybeSendError, portClosedError |}
  
  -- Compression
  transparent normal, sbisim, diamond
  -- compress(P) = sbisim(diamond(P)) 
  compress(P) =  normal(P) --
  --compress(P) = P --  sbisim(diamond(P))

  -- Prioitise Errors over others.
  external prioritise
  -- pri(P) = P
  pri(P) = prioritise(P, <Errors, diff(Events,Errors)>)

exports

  -- Linearisation point for maybeReceive, maybeSend and portClosed
  channel maybeReceive : ChanThreads.Index.Data.Bool
  channel maybeSend : ChanThreads.Index.Option

  -- The interface.  Shared with an Alt
  include "AltInterface.csp"

  channel spuriousWakeup : ThreadID

  -- Specification, with error events visible.
  IdealisedAltX = Spec0 \ {|maybeReceive, maybeSend, portClosed|}

  IdealisedAlt = 
    let internals = {| 
      beginRegistration, endRegistration, 
      getToDeregisterIn, getToDeregisterOut, deregisterDone, endWait,
      maybeReceive, maybeSend, portClosed
    |}  
    within pri(Spec10) \ internals

  -- Model of idealised alt with maybeReceive events visible.
  IdealisedAltLP = 
    let internals = Union({
      {| beginRegistration, endRegistration, 
         getToDeregisterIn, getToDeregisterOut, deregisterDone, endWait,
         portClosed |},
      {| maybeReceive.t.i.x.false | t <- ChanThreads, i <- Index, x <- Data |},
      {| maybeSend.t.i.None | t <- ChanThreads, i <- Index |}
    })  
    within pri(Spec10) \ internals
  
  -- If an error event happens, allow arbitrary behaviour.  The definitions
  -- are different for the stable failures and failures-divergences models.
  SpecF =  
    let events = union(Interface, {|spuriousWakeup|}) within
    ( compress(IdealisedAlt) [| Errors |> CHAOS(events) ) \ Errors
  -- Normalisation of the above takes a long time, because of the CHAOS(events)
  
  SpecD =  ( IdealisedAlt [| Errors |> DIV ) \ Errors

  -- Note: Compression seems to help for the F check, but not the FD check.
  
endmodule