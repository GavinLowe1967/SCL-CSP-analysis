-- A module representing a synchronous channel.  This version does not include
-- closing of channels.  
-- 
-- This file assumes that RegisterInResult is in scope.
module SyncChan(ThreadID, AltID, Data, MaxIndex)
  include "Variable.csp"
  include "Macros.csp"
  include "MonitorCondition.csp"

  -- The value variable: the current or previous value.
  channel getValue, setValue: ThreadID.Data
  Value = Var(head(seq(Data)), getValue, setValue)  

  -- The full variable: is the current value of value valid?
  channel getFull, setFull: ThreadID.Bool
  Full = Var(false, getFull, setFull)

  -- Number of threads
  N = card(ThreadID)

  -- The receiversWaiting variable
  channel getReceiversWaiting, setReceiversWaiting : ThreadID.{0..N}
  ReceiversWaiting = Var(0, getReceiversWaiting, setReceiversWaiting)

  -- macro for receiversWaiting += 1
  IncReceiversWaiting(me) = 
    getReceiversWaiting.me?r -> 
    Assert(r < N, setReceiversWaiting.me.r+1 -> SKIP)

  -- macro for receiversWaiting -= 1
  DecReceiversWaiting(me) =
    getReceiversWaiting.me?r -> 
    Assert(r > 0, setReceiversWaiting.me.r-1 -> SKIP)

  -- Monitor and conditions
  datatype ConditionID = SlotFull | Continue | SlotEmptied

  -------- Sending

  -- slotEmptied.await(!full)
  Send1(me, x) = 
    let Test(cont) = getFull.me?f -> cont(not f) -- test of !full
    within MonitorCondition::AwaitTest(me, SlotEmptied, Test); Send2(me, x)

  -- if(tryAltReceive(x)) slotEmptied.signal() else ...
  Send2(me, x) = 
    let cont(res) =  
      if res then MonitorCondition::Signal(me, SlotEmptied) else Send2a(me, x)
    within TryAltReceive(me, x, cont)

  -- value = x; full = true 
  Send2a(me, x) = setValue.me.x -> setFull.me.true -> CompleteSend(me, x)

  -- maybeSignalToReceiver:
  -- if(receiversWaiting > 0){ slotFull.signal(); receiversWaiting -= 1 }
  MaybeSignalToReceiver(me) = 
    getReceiversWaiting.me?r ->
    if r > 0 then 
      MonitorCondition::Signal(me, SlotFull); DecReceiversWaiting(me)
    else SKIP

  -- completeSend: maybeSignalToReceiver; continue.await()
  CompleteSend(me, x) = 
    MaybeSignalToReceiver(me); MonitorCondition::Await(me, Continue)

  -- Timed sending

  -- val timeout = !slotEmptied.awaitNanos(nanos, !full || isClosed)
  SendWithin1(me, x)(cont) = 
    let Test(cont1) = getFull.me?f -> cont1(not f) -- test "!full"
        Cont(b) = SendWithin2(me, x, cont, not b) -- continuation on result
    within MonitorCondition::TimedAwaitTest(me, SlotEmptied, Test, Cont)

  -- if(timeout) false 
  -- else{ assert(!full); value = x; full = true    // deposit my value
  --       maybeSignalToReceiver; ... }
  SendWithin2(me, x, cont, timeout) = 
    if(timeout) then cont(false) 
    else
      getFull.me?f -> Assert1(not f); setValue.me.x -> setFull.me.true -> 
      MaybeSignalToReceiver(me); SendWithin3(me, x, cont)
  
  -- val success = continue.awaitNanos(deadline-nanoTime)
  SendWithin3(me, x, cont) = 
    let cont1(success) = if success then cont(true) else SendWithin4(me, x, cont)
    within MonitorCondition::TimedAwait(me, Continue, cont1)
  
  -- Case of no corresponding receiver
  -- assert(full && value == x); full = false; slotEmptied.signal(); false
  SendWithin4(me, x, cont) = 
    getFull.me?f -> getValue.me?x1 -> Assert1(f and x == x1);
    setFull.me.false -> MonitorCondition::Signal(me, SlotEmptied);
    cont(false) 

  -------- Receiving

  -- while(!full){ receiversWaiting += 1; slotFull.await() }
  Receive1(me)(cont) = 
    let Test(cont1) = getFull.me?f -> cont1(not f)
        Body = IncReceiversWaiting(me); MonitorCondition::Await(me, SlotFull)
    within While(Test, Body); Receive2(me, cont)

  -- assert(full); 
  Receive2(me, cont) =
    getFull.me?f -> Assert1(f); CompleteReceive(me, cont)

  -- completeReceive: full = false; continue.signal(); slotEmptied.signal();
  -- unlock and return value
  CompleteReceive(me, cont) = 
    setFull.me.false -> MonitorCondition::Signal(me, Continue); 
    MonitorCondition::Signal(me, SlotEmptied); getValue.me?v -> cont(v) 

  -- var timeout = false
  -- while(!full && !timeout){
  --   receiversWaiting += 1; timeout = !slotFull.awaintNanos(...)
  -- }
  ReceiveWithin1(me)(cont) = 
    let Test(timeout)(cont1) = getFull.me?f -> cont1(not f and not timeout)
        Body(timeout)(cont1) = 
          IncReceiversWaiting(me); 
          -- Below b represents the result of the awaitNanos.  The
          -- continuation of Body is applied to the new value of timeout.
          MonitorCondition::TimedAwait(me, SlotFull, \b @ cont1(not b))
        Cont(timeout) = 
          if timeout then ReceiveWithinTimeout(me, cont) 
          else ReceiveWithinFull(me, cont)
    within While1(Test, Body, false, Cont)

  -- if(timeout){ receiversWaiting -= 1; None }
  ReceiveWithinTimeout(me, cont) = 
    DecReceiversWaiting(me); cont(None) 

  -- assert(full); Some(completeReceive)
  ReceiveWithinFull(me, cont) = 
    getFull.me?f -> Assert1(f); CompleteReceive(me, \ v @ cont(Some.v))

  ------------------ Interactions with Alts. 

  Index = {0.. MaxIndex-1}

  -- Optionally an AltID.  The value NoAlt corresponds to null in the
  -- implementation.
  datatype OptAlt = NoAlt | SomeAlt.AltID.Index

  -- The receivingAlt variable
  channel getReceivingAlt, setReceivingAlt : ThreadID.OptAlt
  ReceivingAlt = Var(NoAlt, getReceivingAlt, setReceivingAlt)

  -- Try to have current registered alt (if any) receive x.  Return true if
  -- successful.
  TryAltReceive(me, x, cont) = 
    getReceivingAlt.me.SomeAlt?alt?index -> setReceivingAlt.me.NoAlt ->
      TryAltReceive1(me, x, cont, alt, index)
    []  
    getReceivingAlt.me.NoAlt -> cont(false) -- no registered alt

  -- Try to have alt receive x.
  TryAltReceive1(me, x, cont, alt, index) = 
    beginMaybeReceive.me.alt.index.x -> endMaybeReceive.me.alt?res -> cont(res)

  -- Thread me in Alt alt performing a registerIn.  
  -- checkCanRegisterIn
  RegisterIn1(me, alt, index)(cont) = 
    getReceivingAlt.me?a -> Assert1(a == NoAlt); 
    RegisterIn2(me, alt, index, cont)

  -- If(canReceive) ...; canReceive in SyncChan just reads full
  RegisterIn2(me, alt, index, cont) = 
    getFull.me?f -> 
    if f then
      -- val result = completeReceive; RegisterInSuccess(result)
      CompleteReceive(me, \ v @ cont(RegisterInSuccess.v))
    else -- receivingAlt = alt; RegisterInWaiting
      setReceivingAlt.me.(SomeAlt.alt.index) -> cont(RegisterInWaiting)

  -- Thread me in Alt alt performing a deregisterIn
  DeregisterIn1(me, alt, index) = 
    getReceivingAlt.me?a -> Assert1(a == (SomeAlt.alt.index) or a == NoAlt);
    setReceivingAlt.me.NoAlt -> SKIP
    

  ---------- All variables

  Variables = Full ||| Value ||| ReceiversWaiting ||| ReceivingAlt

  varEvents = 
    {| getFull, setFull, getValue, setValue, 
       getReceiversWaiting, setReceiversWaiting, 
       getReceivingAlt, setReceivingAlt |}

  -- All internal events
  events = union(varEvents, MonitorCondition::events)

exports

  datatype Option = None | Some.Data

  ----- Interface to other classes.

  -- Thread me sends x
  Send(me, x) = MonitorCondition::Mutex(me, Send1(me, x))

  -- Thread me receives value, and applies cont to it.
  Receive :: (ThreadID, (Data) -> Proc) -> Proc
  Receive(me, cont) = MonitorCondition::MutexC(me, Receive1(me), cont)

  -- Thread me does sendWithin(_)(x), and applies cont to it.
  SendWithin :: (ThreadID, Data, (Bool) -> Proc) -> Proc
  SendWithin(me, x, cont) = 
    MonitorCondition::MutexC(me, SendWithin1(me, x), cont)

  -- Thread me does receiveWithin(_) with continuation cont. 
  ReceiveWithin :: (ThreadID, (Option) -> Proc) -> Proc
  ReceiveWithin(me, cont) = 
    MonitorCondition::MutexC(me, ReceiveWithin1(me), cont)

  -- Events for calling back to Alts. 
  channel beginMaybeReceive: ThreadID . AltID . Index . Data 
  channel endMaybeReceive: ThreadID . AltID . Bool

  -- Thread me, in an alt, does registerIn with continuation cont
-- IMPROVE, include branch number, iter.
  RegisterIn :: (ThreadID, AltID, Int, (RegisterInResult) -> Proc) -> Proc
  RegisterIn(me, alt, index, cont) = 
    MonitorCondition::MutexC(me, RegisterIn1(me, alt, index), cont)

  DeregisterIn :: (ThreadID, AltID, Int) -> Proc
  DeregisterIn(me, alt, index) = 
    MonitorCondition::Mutex(me, DeregisterIn1(me, alt, index))

  ------ Administrative functions

  -- Run P with this channel
  runWith(P) = 
    let P1 = P [| varEvents |] Variables
    within MonitorCondition::runWith(P1)

  -- Run P with this channel, and hide internals
  runWithAndHide(P) = runWith(P) \ events

endmodule