-- Check of an alt against its idealised model. 

-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2   | T3 -- | T4

ChanThreads =  diff(ThreadID, {AltThread})

-- Identities of channels
datatype ChanID = Chan0 | Chan1

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1

-- Strict = true

-- -- Execute P if Strict is set.  Used for optional assertions. 
-- IfStrict(P) = if Strict then P else SKIP

include "Alt.csp"

-- The list of branches in the alt
branches =  <InPortBranch.Chan0, OutPortBranch.Chan1>
-- branches =  < InPortBranch.Chan0, InPortBranch.Chan1 >

Index = {0..length(branches)-1}

-- Create the alt.
instance A1 = Alt(Alt1, branches, ThreadID, ChanID)

-- -- The alt thread
-- TheAltThread = RUN(A1::altInterface(AltThread))
--   -- A1::beginAlt.AltThread -> A1::endAlt.AltThread?_ -> TheAltThread
--   -- |~|
--   -- STOP

-- -- A channel thread
-- ChanThread(me) = RUN(A1::callBacks(me))

-- Threads = (||| t <- ChanThreads @ ChanThread(t)) ||| TheAltThread

-- Events corresponding to operation calls
ThreadEvents = union(
  A1::altInterface(AltThread), 
  Union({ A1::callBacks(t) | t <- ChanThreads })
)

-- Events that we don't try to constrain
FreeEvents = {|  
  A1::beginRegisterIn, A1::endRegisterIn,  
  A1::beginRegisterOut, A1::endRegisterOut,
  A1::beginDeregisterIn, A1::endDeregisterIn, 
  A1::beginDeregisterOut, A1::endDeregisterOut
|}

-- Build the system
System0 = A1::runWithAndHide(RUN(union(ThreadEvents, FreeEvents))) 
-- Threads ||| RUN(FreeEvents))

System = System0[[
  A1::beginAlt <- IdealisedAlt::beginAlt,
  A1::endAlt <- IdealisedAlt::endAlt,
  -- Registration
  A1::beginRegisterIn <- IdealisedAlt::beginRegisterIn,
  A1::endRegisterIn <- IdealisedAlt::endRegisterIn,
  A1::beginRegisterOut <- IdealisedAlt::beginRegisterOut,
  A1::endRegisterOut <- IdealisedAlt::endRegisterOut,
  A1::beginDeregisterIn <- IdealisedAlt::beginDeregisterIn,
  A1::endDeregisterIn <- IdealisedAlt::endDeregisterIn,
  A1::beginDeregisterOut <- IdealisedAlt::beginDeregisterOut,
  A1::endDeregisterOut <- IdealisedAlt::endDeregisterOut,
  -- Call backs
  A1::beginMaybeSend <- IdealisedAlt::beginMaybeSend,
  A1::endMaybeSend <- IdealisedAlt::endMaybeSend,
  A1::beginMaybeReceive <- IdealisedAlt::beginMaybeReceive,
  A1::endMaybeReceive <- IdealisedAlt::endMaybeReceive,
  A1::beginPortClosed <- IdealisedAlt::beginPortClosed,
  A1::endPortClosed <- IdealisedAlt::endPortClosed
]]
[[ A1::spuriousWakeup <- IdealisedAlt::spuriousWakeup ]]
-- Note: the split of renamings is to make the FDR debug more readable.

include "IdealisedAlt.csp"

assert IdealisedAlt::SpecF [T= System

assert IdealisedAlt::SpecF [F= System

assert IdealisedAlt::SpecD [FD= System

-- I think the FD refinement implies the F refinement if Spec1 is divergence
-- free.

assert IdealisedAlt::IdealisedAltSpec :[ divergence free ]
