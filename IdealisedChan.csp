-- A test on a SyncChan, comparing it to an idealised specification. 

-- Thread identities.  Thread AltThread will run the Alt; other threads will
-- act on channels.
datatype ThreadID = AltThread | T1 | T2  | T3 -- | T4

others(t) = diff(ChanThreads, {t})

ChanThreads =  diff(ThreadID, {AltThread})

-- Identities of channels
datatype ChanID = Chan1

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1

Strict = true

-- Execute P if Strict is set.  Used for optional assertions. 
IfStrict(P) = if Strict then P else SKIP

include "NewSyncChan.csp" 

-- Max # branches in an alt
size = 2 

-- Possible indices of branches.
Index = {0..size-1}

-- Create channel
instance C1 = SyncChan(ThreadID, AltID, Data, size)

-- A regulator that ensures a channel thread alternates between begins and ends.

Reg(me) = 
  C1::beginSend.me?x -> C1::endSend.me?res -> Reg(me) 
  |~|
  C1::beginReceive.me -> C1::endReceive.me?res -> Reg(me)
  |~|
false & (
  C1::beginSendWithin.me?x -> C1::endSendWithin.me?b -> Reg(me)
  |~|
  C1::beginReceiveWithin.me -> C1::endReceiveWithin.me?ox -> Reg(me)
)
  |~|
false &  C1::beginClose.me -> C1::endClose.me -> Reg(me)
  |~| 
  STOP

-- A regulator that ensures that the alt thread alternates between begin and
-- end events.
AltReg(me, alt) = 
  C1::beginRegisterIn.me.alt$index -> C1::endRegisterIn.me.alt?_ ->
    AltReg(me, alt)
  |~|
  C1::beginDeregisterIn.me.alt$index -> C1::endDeregisterIn.me.alt ->
    AltReg(me, alt)
  |~| 
  C1::beginRegisterOut.me.alt$index -> C1::endRegisterOut.me.alt?_ ->
    AltReg(me, alt)
  |~|
  C1::beginDeregisterOut.me.alt$index -> C1::endDeregisterOut.me.alt ->
    AltReg(me, alt)
  |~|
  STOP

Regs = (||| t <- ChanThreads @ Reg(t))  ||| AltReg(AltThread, Alt1)

-- Events that we don't try to constrain
FreeEvents = 
  {| C1::beginMaybeReceive, C1::endMaybeReceive, 
     C1::beginMaybeSend, C1::endMaybeSend |}

System0 = C1::runWithAndHide(Regs ||| RUN(FreeEvents))

------------------------- Idealised specification


{-
-- channel closing linearization point
channel close: ThreadID . ChanID

channel isClosed: ThreadID . ChanID
-}


-- Macros for set operations
add(set,x) = union(set,{x})
remove(set,x) = diff(set,{x})

--------- Lineariser for registration and deregistration

-- Linearisation points of registerIn corresponding to a synchronisation,
-- waiting, or an out-of-protocol call.
channel registerInSync : ChanThreads . Data
channel registerInWait : Index 
channel registerError 
-- Linearisation points of deregistration at inport, corresponding to legal or
-- out-of-protocol cases.
channel deregisterIn, deregisterInError : Index
-- Linearisation points of registerOut
channel registerOutSync : ChanThreads . Data
channel registerOutWait : Index
-- Linearisation points of deregistration at outport, corresponding to legal or
-- out-of-protocol cases.
channel deregisterOut, deregisterOutError : Index

-- Signal from Spec0 that the Alt has broken the contract.  
-- channel error

-- Lineariser for registration and deregistration events; but allowing
-- arbitrary behaviour after error.
RegLin = 
  C1::beginRegisterIn.AltThread.Alt1?index -> (
    registerInSync?t?x -> C1::endRegisterIn.AltThread.Alt1.RegisterInSuccess.x ->
    RegLin
    []
    registerInWait.index -> C1::endRegisterIn.AltThread.Alt1.RegisterInWaiting ->
    RegLin
    []
    registerError -> STOP
  )
  |~|
  C1::beginDeregisterIn.AltThread.Alt1?index -> (
    deregisterIn.index -> C1::endDeregisterIn.AltThread.Alt1 -> RegLin
    []
    deregisterInError.index -> STOP
  )
  |~|
  C1::beginRegisterOut.AltThread.Alt1?index -> (
    ( |~| x : Data @
       registerOutSync?t!x -> 
       C1::endRegisterOut.AltThread.Alt1.RegisterOutSuccess.x -> RegLin
    )
    []
    registerOutWait.index -> 
    C1::endRegisterOut.AltThread.Alt1.RegisterOutWaiting -> RegLin
    []
    registerError -> STOP
  )  
  |~|
  C1::beginDeregisterOut.AltThread.Alt1?index -> (
    deregisterOut.index -> C1::endDeregisterOut.AltThread.Alt1 -> RegLin
    []
    deregisterOutError.index -> STOP
  )
  |~|
  STOP

alphaRegLin = {|
  C1::beginRegisterIn, C1::endRegisterIn, 
  registerInSync, registerInWait, registerError,
  C1::beginDeregisterIn, C1::endDeregisterIn, 
  deregisterIn, deregisterInError,
  C1::beginRegisterOut, C1::endRegisterOut,
  registerOutSync, registerOutWait,
  C1::beginDeregisterOut, C1::endDeregisterOut, 
  deregisterOut, deregisterOutError
|}

------------ Linearisers for channel thread ops

-- In sync and altSync events, the sender comes first

-- synchronsation between a sender and receiver
channel sync : ChanThreads . ChanThreads . Data

-- A thread, having synchronised with either a channel thread or the alt
-- thread, commits to returning.  This corresponds to that thread re-acquiring
-- the lock in the implementation.  Subsequently, the corresponding end event
-- cannot be refused.
channel commit : ChanThreads

-- The channel chooses to call maybeReceive by a particular thread.
channel callMaybeReceive : ChanThreads . Index . Data

channel callMaybeSend : ChanThreads . Index

-- A lineariser for thread me
Lin(me) = 
  C1::beginSend.me?x -> SendingLin(me, x)
  |~|
  C1::beginReceive.me -> ReceivingLin(me)
  |~|
  STOP

-- Lineariser for thread me inside send(x).
SendingLin(me, x) = 
  sync.me?other:others(me)!x -> commit.me -> EndSendingLin(me)
  []
  registerInSync.me.x -> commit.me -> EndSendingLin(me)
  []
  callMaybeReceive.me?index!x -> C1::beginMaybeReceive.me.Alt1.index.x -> 
  C1::endMaybeReceive.me.Alt1?res -> 
  (if res then EndSendingLin(me) else SendingLin(me, x))

EndSendingLin(me) = C1::endSend.me.SendSuccess -> Lin(me)

-- Lineariser for thread me inside receive.
ReceivingLin(me) =  
  sync?other:others(me)!me?x -> EndReceivingLin(me, x)
  []
  registerOutSync.me?x -> EndReceivingLin(me, x)
  []
  callMaybeSend.me?index -> C1::beginMaybeSend.me.Alt1.index -> (
    C1::endMaybeSend.me.Alt1.Some?x -> EndReceivingLin(me, x)
    [] C1::endMaybeSend.me.Alt1.None -> ReceivingLin(me)
  )

EndReceivingLin(me, x) =  C1::endReceive.me.ReceiveSuccess.x -> Lin(me)

-- Alphabet for Lin(me)
alphaLin(me) = union(
  {| C1::beginSend.me, C1::endSend.me, C1::beginReceive.me, C1::endReceive.me,
     callMaybeReceive.me, C1::beginMaybeReceive.me, C1::endMaybeReceive.me,
     callMaybeSend.me, C1::beginMaybeSend.me, C1::endMaybeSend.me,
     sync.me, commit.me, registerInSync.me, registerOutSync.me  |},
  {| sync.other.me | other <- others(me) |}
)

-- All the linearisers for channel threads. 
Lins = || t <- ChanThreads @ [alphaLin(t)] Lin(t)

alphaLins = Union({ alphaLin(t) | t <- ChanThreads })

--------------------------- Main specification

-- A representation of how the alt is registered with the channel.  
datatype RegStatus = NoReg | InReg.Index | OutReg.Index

-- Is there an alt currently registered at the InPort?
isRegIn(InReg._) = true
isRegIn(_) = false

isRegOut(OutReg._) = true
isRegOut(_) = false

-- Indexes (at most one) for which deregistration is legal.
legalDeregIns(InReg.index) = {index}
legalDeregIns(_) = {}

legalDeregOuts(OutReg.index) = {index}
legalDeregOuts(_) = {}

-- Synchronisation between threads in Alt and channel, passing data value.
--channel altSync : ThreadID . ThreadID . ChanID . Data

channel modellingError

-- regStatus records whether and how an alt is registered.
ChanState :: (RegStatus) -> Proc
ChanState(regStatus) = 
-- Linearisation of register calls.  Note: if there's a pending send, it's
-- nondeterministic whether the registerIn will synchronise with it.
  regStatus == NoReg & (
    registerInSync?t.x -> ChanState(NoReg) 
    [] registerInWait?index -> ChanState(InReg.index)
    [] registerOutSync?t.x -> ChanState(NoReg)
    [] registerOutWait?index -> ChanState(OutReg.index)
  )
  []
-- Illegal call of registerIn or registerOut
  regStatus != NoReg & registerError -> STOP
  []   
-- Deregistration from inport.
  deregisterIn?index:legalDeregIns(regStatus) ->  ChanState(NoReg)
  []
-- Illegal deregistration from inport
  deregisterInError?index:diff(Index, legalDeregIns(regStatus)) -> STOP
  []
-- Deregistration from outport
  deregisterOut?index:legalDeregOuts(regStatus) -> ChanState(NoReg)
  []
-- Illegal deregistration from outport
  deregisterOutError?index:diff(Index, legalDeregOuts(regStatus)) -> STOP
  []
-- Synchronisation between standard send and receive
  sync?t1?t2:others(t1)?x -> ChanState(regStatus)
  []
-- A thread, having synchronised with either a channel thread or the alt
-- thread, commits to returning
  commit?_ -> ChanState(regStatus)
  []
-- Calls to maybeReceive
  isRegIn(regStatus) & (
    let InReg.index = regStatus within
    callMaybeReceive?t!index?x -> C1::beginMaybeReceive.t.Alt1.index.x -> 
    C1::endMaybeReceive.t!Alt1?res -> ChanState(NoReg)
  )
  []
-- Calls to maybeSend
  isRegOut(regStatus) & (
    let OutReg.index = regStatus within
    callMaybeSend?t!index -> C1::beginMaybeSend.t.Alt1.index -> 
    C1::endMaybeSend.t.Alt1?res -> ChanState(NoReg)
  )
  -- The initial event of each process in the last two branches is hidden, so
  -- this process may nondeterministically choose to go down that route.

alphaChanState = {|
  registerInSync, registerInWait, registerError, deregisterIn, deregisterInError,
  registerOutSync, registerOutWait, deregisterOut, deregisterOutError,
  callMaybeReceive, C1::beginMaybeReceive, C1::endMaybeReceive, 
  callMaybeSend, C1::beginMaybeSend, C1::endMaybeSend,
  sync, commit, modellingError
|}

-- Put the specification together
ChannelSpec0 = 
  let syncSet = inter(union(alphaChanState, alphaRegLin), alphaLins) within
  ( (ChanState(NoReg) [ alphaChanState || alphaRegLin ] RegLin) 
    [| syncSet |] Lins
  ) 
  \ {| registerInSync, registerInWait, registerOutSync, registerOutWait, 
       deregisterIn, deregisterOut,
       sync, commit, callMaybeReceive, callMaybeSend |}

-- Allow arbitrary behaviour after an error event; first for stable failures.
Errors = {| registerError, deregisterInError, deregisterOutError |}

SpecF =  (ChannelSpec0 [| Errors |> CHAOS(C1::Interface) ) \ Errors

-- Now for FD model.
SpecD = (ChannelSpec0 [| Errors |> DIV ) \ Errors

assert SpecF [T= System0

assert SpecF [F= System0

assert SpecD [FD= System0

transparent normal
--assert CHAOS(Events) [F= normal(Spec)