-- An idealised model of a SyncChan.

-- This module assumes that the following are in scope: (1) the definitions in
-- Types.csp; (2) a definition of ThreadID, including AltThread, and a
-- corresponding definition of ChanThreads; (3) a definition of AltID,
-- including Alt1.

module IdealisedChan(size)

  -- Possible indices of branches.
  Index = {0..size-1}

  -- Macros for set operations
  add(set,x) = union(set,{x})
  remove(set,x) = diff(set,{x})

  -- Channel threads other than t.
  others(t) = diff(ChanThreads, {t})
  
  --------- Lineariser for registration and deregistration
  
  -- Linearisation points of register(In|Out) corresponding to a synchronisation,
  -- waiting, or an out-of-protocol call.
  channel registerInSync, registerOutSync : ChanThreads . Data
  channel registerInWait, registerOutWait : AltID . Index 
  channel registerError 
  -- Linearisation points of deregistration, corresponding to legal or
  -- out-of-protocol cases.
  channel deregisterIn, deregisterInError, deregisterOut, deregisterOutError : 
    AltID . Index
  
  -- Thread finding the channel is closed.
  channel isClosed : ThreadID
  
  -- Lineariser for registration and deregistration events.
  RegLin = 
    beginRegisterIn.AltThread?a?index -> RegLinRegIn(a, index)
    [] beginDeregisterIn.AltThread?a?index -> RegLinDeregIn(a, index)
    [] beginRegisterOut.AltThread?a?index -> RegLinRegOut(a, index)
    [] beginDeregisterOut.AltThread?a?index -> RegLinDeregOut(a, index)
  
  -- Alt registering at inport against index.
  RegLinRegIn :: (AltID, Int) -> Proc
  RegLinRegIn(a, index) = 
    let endChan = endRegisterIn.AltThread.a
    within
    registerInSync?t?x -> endChan.RegisterSuccess.x -> RegLin
    [] registerInWait.a.index -> endChan.RegisterWaiting -> RegLin
    [] isClosed.AltThread -> endChan.RegisterClosed -> RegLin
    [] registerError -> STOP
  
  -- Alt deregistering at inport against index.
  RegLinDeregIn(a, index) = 
    deregisterIn.a.index -> endDeregisterIn.AltThread.a -> RegLin
    [] deregisterInError.a.index -> STOP
  
  -- Alt deregistering at outport against index.
  RegLinRegOut :: (AltID, Int) -> Proc
  RegLinRegOut(a, index) = 
    let endChan = endRegisterOut.AltThread.a
    within
    (|~| x : Data @ registerOutSync?t!x -> endChan.RegisterSuccess.x -> RegLin)
    [] registerOutWait.a.index -> endChan.RegisterWaiting -> RegLin
    [] isClosed.AltThread -> endChan.RegisterClosed -> RegLin
    [] registerError -> STOP
  
  -- Alt deregistering at outport against index.
  RegLinDeregOut(a, index) = 
    deregisterOut.a.index -> endDeregisterOut.AltThread.a -> RegLin
    [] deregisterOutError.a.index -> STOP

  -- Linearisation points of registration and deregistration.
  RegLPs = {| 
    registerInSync, registerInWait, registerOutSync, registerOutWait,
    registerError,
    deregisterIn, deregisterInError, deregisterOut, deregisterOutError 
  |}

  alphaRegLin = Union({
    AltRegistrationEvents, RegLPs, {| isClosed.AltThread |}
  })
  
  ------------ Linearisers for channel thread ops
  
  -- synchronsation between a sender (first field) and receiver (second field).
  channel sync : ChanThreads . ChanThreads . Data
  
  -- A thread, having synchronised with either a channel thread or the alt
  -- thread, commits to returning.  This corresponds to that thread re-acquiring
  -- the lock in the implementation.  Subsequently, the corresponding end event
  -- cannot be refused.
  channel commit : ChanThreads
  
  -- The channel chooses to call maybeReceive or maybeSend by a particular
  -- thread.
  channel callMaybeReceive : ChanThreads . AltID . Index . Data
  channel callMaybeSend : ChanThreads . AltID . Index

  -- A channel timesout within a sendWithin or receiveWithin
  channel timeout : ChanThreads
  
  -- channel closing linearization point
  channel close : ChanThreads
  
  -- A lineariser for thread me
  Lin(me) = 
    beginSend.me?x -> SendingLin(me, x, endSend.me, false)
    [] beginReceive.me -> ReceivingLin(me, endReceive.me, false)
    [] beginSendWithin.me?x -> SendingLin(me, x, endSendWithin.me, true)
    [] beginReceiveWithin.me -> ReceivingLin(me, endReceiveWithin.me, true) 
    [] beginClose.me -> close.me -> isClosed.me -> endClose.me -> Lin(me)
    -- Note: the isClosed event means the endClose happens only after the
    -- registered port (if any) has been informed.
  
  -- Lineariser for thread me inside send(x) (if timed = false) or
  -- sendWithin(x) (if timed = true).  endChan is used to signal the end.
  SendingLin(me, x, endChan, timed) = 
    let Success = endChan.SendSuccess -> Lin(me) 
    within
    sync.me?other:others(me)!x -> commit.me -> Success
    []
    registerInSync.me.x -> commit.me -> Success
    []
    callMaybeReceive.me?a.index!x -> beginMaybeReceive.me.a.index.x -> 
      endMaybeReceive.me.a?res -> 
      (if res then Success else SendingLin(me, x, endChan, timed))
    []
    isClosed.me -> endChan.Closed -> Lin(me)
    []
    timed & timeout.me -> endChan.Timeout -> Lin(me)
  
  -- Lineariser for thread me inside receive or receiveWithin.
  ReceivingLin(me, endChan, timed) =  
    let Success(x) = endChan.ReceiveSuccess.x -> Lin(me) 
    within
    sync?other:others(me)!me?x -> Success(x) -- EndReceivingLin(me, x)
    []
    registerOutSync.me?x -> Success(x) -- EndReceivingLin(me, x)
    []
    callMaybeSend.me?a.index -> beginMaybeSend.me.a.index -> (
      endMaybeSend.me.a.Some?x -> Success(x) -- EndReceivingLin(me, x)
      [] endMaybeSend.me.a.None -> ReceivingLin(me, endChan, timed)
    )
    [] 
    isClosed.me -> endChan.Closed -> Lin(me)
    []
    timed & timeout.me -> endChan.Timeout -> Lin(me)

  -- Alphabet for Lin(me)
  alphaLin(me) = Union({
    clientInterface(me), 
    {| callMaybeReceive.me, beginMaybeReceive.me, endMaybeReceive.me,
       callMaybeSend.me, beginMaybeSend.me, endMaybeSend.me,
       sync.me, commit.me, registerInSync.me, registerOutSync.me, 
       timeout.me, close.me, isClosed.me  |},
    {| sync.other.me | other <- others(me) |}
  })
  
  -- All the linearisers for channel threads. 
  Lins = || t <- ChanThreads @ [alphaLin(t)] Lin(t)
  
  alphaLins = Union({ alphaLin(t) | t <- ChanThreads })
  
  --------------------------- Main specification
  
  -- A representation of how the alt is registered with the channel.  
  datatype RegStatus = NoReg | InReg.AltID.Index | OutReg.AltID.Index

  AltIndex = { a.i | a <- AltID, i <- Index }
  
  -- Is the alt currently registered at the inport or outport?
  isRegIn(InReg._) = true
  isRegIn(_) = false
  
  isRegOut(OutReg._) = true
  isRegOut(_) = false
  
  -- Indexes (at most one) against which the alt is registered.
  getRegIns(InReg.a.index) = {a.index}
  getRegIns(_) = {}
  
  getRegOuts(OutReg.a.index) = {a.index}
  getRegOuts(_) = {}
  
  -- channel modellingError
  
  -- regStatus records whether and how an alt is registered.
  ChanState :: (RegStatus) -> Proc
  ChanState(regStatus) = 
    let regIns = getRegIns(regStatus)
        regOuts = getRegOuts(regStatus)
    within
  -- Linearisation of register calls.  Note: if there's a pending send, it's
  -- nondeterministic whether the registerIn will synchronise with it.
    regStatus == NoReg & (
      registerInSync?t.x -> ChanState(NoReg) 
      [] registerInWait?a.index -> ChanState(InReg.a.index)
      [] registerOutSync?t.x -> ChanState(NoReg)
      [] registerOutWait?a.index -> ChanState(OutReg.a.index)
    )
    []
  -- Illegal call of registerIn or registerOut
    regStatus != NoReg & registerError -> STOP
    []   
  -- Deregistration from inport, including if there is no registered port.
    deregisterIn?ai:regIns ->  ChanState(NoReg)
    []
    regStatus == NoReg & deregisterIn?ai ->  ChanState(NoReg)
    []
  -- Illegal deregistration from inport
    regStatus != NoReg & deregisterInError?ai:diff(AltIndex, regIns) -> STOP
    []
  -- Deregistration from outport, including if there is no registered port.
    deregisterOut?ai:regOuts -> ChanState(NoReg)
    []
    regStatus == NoReg & deregisterOut?ai ->  ChanState(NoReg)
    []
  -- Illegal deregistration from outport
    regStatus != NoReg & deregisterOutError?ai:diff(AltIndex, regOuts) -> STOP
    []
  -- Synchronisation between standard send and receive
    sync?t1?t2:others(t1)?x -> ChanState(regStatus)
    []
  -- A thread, having synchronised with either a channel thread or the alt
  -- thread, commits to returning
    commit?_ -> ChanState(regStatus)
    []
  -- Calls to maybeReceive; block other events until the call returns
    callMaybeReceive?t?(a.index):regIns?x ->  beginMaybeReceive.t.a.index.x -> 
      endMaybeReceive.t.a?res -> ChanState(NoReg)
    []
  -- Calls to maybeSend; block other events until the call returns
    callMaybeSend?t?(a.index):regOuts -> beginMaybeSend.t.a.index -> 
      endMaybeSend.t.a?res -> ChanState(NoReg)
    -- The initial event of each process in the last two branches is hidden, so
    -- this process may nondeterministically choose to go down that route.
    []
  -- A thread in sendWithin or receiveWithin timesout.
    timeout?_ -> ChanState(regStatus)
    []
    close?t -> (
      if regStatus == NoReg then ChanStateClosed
      else     -- inform the registered port
        beginPortClosed.t?(a.index):union(regIns,regOuts) -> 
        endPortClosed.t.a -> ChanStateClosed
    )
  
  -- The channel is closed.  
  ChanStateClosed = 
    isClosed?_ -> ChanStateClosed
    [] close?_ -> ChanStateClosed
    [] commit?_ -> ChanStateClosed
    [] deregisterIn?_ -> ChanStateClosed
    [] deregisterOut?_ -> ChanStateClosed
  
  alphaChanState = Union({
    AltCallBacks, -- External
    RegLPs, -- Synchronisations with RegIn; registerInSync.t,
	    -- registerOutSync.t also sync with Lin(t)
    {| callMaybeReceive, callMaybeSend, sync, commit, timeout, close, isClosed |}
       -- Events synchonising with Lin(t)s
  })
  
  -- Put the specification together
  ChannelSpec0 = 
    let syncSet = inter(union(alphaChanState, alphaRegLin), alphaLins)
    within
     (ChanState(NoReg) [ alphaChanState || alphaRegLin ] RegLin) 
     [| syncSet |] Lins
     
  -- Error events
  Errors = {| registerError, deregisterInError, deregisterOutError |}
  
exports

  -- Definition of the interface of the channel.  Shared with SyncChan.
  include "ChanInterface.csp"

  -- Specification, with error events visible.
  IdealisedChannel = 
    let internals = 
          {| registerInSync, registerInWait, registerOutSync, registerOutWait, 
             deregisterIn, deregisterOut, close, isClosed,
             sync, commit, timeout, callMaybeReceive, callMaybeSend |}
    within ChannelSpec0 \ internals

  -- If an error event happens, allow arbitrary behaviour.  The definitions
  -- are different for the stable failures and failures-divergences models.
  SpecF =  (IdealisedChannel [| Errors |> CHAOS(Interface) ) \ Errors
  
  SpecD = (IdealisedChannel [| Errors |> DIV ) \ Errors
  
endmodule
  