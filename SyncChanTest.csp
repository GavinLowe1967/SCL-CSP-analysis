-- Test upon SyncChan (without alts).  This file is really a stepping stone 
-- towards more sophisticated tests.

datatype ThreadID = T1 | T2  | T3 | T4  | T5 -- | T6

-- The following are needed in Types.csp, but aren't otherwise used here. 
datatype ChanID = Chan1
MaxIndex = 1
Index = {0}

include "Types.csp"

-- Identities of Alts
datatype AltID = Alt1

include "NewSyncChan.csp"

-- We'll test a single channel
instance C = SyncChan(ThreadID, AltID, Data, MaxIndex)

-- Flags to control whether we include the timed operations and closing of
-- channels.
TIMED_FLAG = true 
CLOSE_FLAG = true 

-- Client interface events that we allow to be performed.  The flags can be
-- used to restrict to particular operations.
AllowedEvents = Union({
  {| C::beginSend, C::endSend, C::beginReceive, C::endReceive |},
  {| C::beginSendWithin, C::endSendWithin, 
     C::beginReceiveWithin, C::endReceiveWithin | TIMED_FLAG |},
  {| C::beginClose, C::endClose | CLOSE_FLAG |}
})

Threads = RUN(AllowedEvents)

System = C::runWithAndHide(Threads)

-- System where synchronisation points are visible
--SystemSP = C::runWithSP(Threads)

assert System  :[divergence free]

-- Specification of synchronisation linearisation.

-- sync.t1.t2.x represents sender t1 and receiver t2 synchronising on the
-- sending of x.
channel sync : ThreadID . ThreadID . Data

-- channel closing linearization point.
channel close: ThreadID 

-- Test of whether the channel is closed. 
channel isClosed: ThreadID 

-- A thread timing out in a sendWithin or receiveWithin.
channel timeout: ThreadID

-- A linearizer for thread t
Linearizer(me) = 
  C::beginSend.me?x -> SendingLin(me, x, C::endSend.me)
  []
  C::beginReceive.me -> ReceivingLin(me, C::endReceive.me)
  []
  TIMED_FLAG & (
    C::beginSendWithin.me?x -> SendingWithinLin(me, x, C::endSendWithin.me)
    []
    C::beginReceiveWithin.me -> ReceivingWithinLin(me, C::endReceiveWithin.me)
  )
  []
  CLOSE_FLAG & C::beginClose.me -> close.me -> C::endClose.me -> Linearizer(me)

-- States of the linearizer when the thread is within various operations.
SendingLin(me, x, endChan) = 
  sync.me?other!x -> endChan.SendSuccess -> Linearizer(me)
  [] isClosed.me -> endChan.Closed -> Linearizer(me)

ReceivingLin(me, endChan) =  
  sync?other!me?x -> endChan.ReceiveSuccess.x -> Linearizer(me)
  [] isClosed.me -> endChan.Closed -> Linearizer(me)

SendingWithinLin(me, x, endChan) = 
  SendingLin(me, x, endChan)
  [] timeout.me -> endChan.Timeout -> Linearizer(me)

ReceivingWithinLin(me, endChan) = 
  ReceivingLin(me, endChan) 
  [] timeout.me -> endChan.Timeout -> Linearizer(me)

-- Alphabet of Linearizer(t)
alphaLin(t) = Union({
  C::clientInterface(t),
  {| sync.t.other, sync.other.t | other <- diff(ThreadID,{t}) |},
  {| close.t, isClosed.t, timeout.t |}
})

-- Specification object for a channel: keeps track of whether the channel is
-- closed, allowing appropriate events before and after.
ChanSpec = 
  sync?_?_?_ -> ChanSpec [] timeout?_ -> ChanSpec [] close?_ -> ChanSpecClosed

ChanSpecClosed = isClosed?_ -> ChanSpecClosed [] close?_ -> ChanSpecClosed

alphaChanSpec = {| sync, close, isClosed, timeout |} 

-- Specification of synchronisation linearisation.
Spec0 = 
  (|| t <- ThreadID @ [alphaLin(t)] Linearizer(t)) 
  [| alphaChanSpec |] ChanSpec

Spec = Spec0 \ alphaChanSpec

assert Spec [T= System
assert Spec [F= System
assert Spec [FD= System

-- Now using explicit SPs

-- SpecSP = 
--   (Spec0 \ {| isClosed, timeout |})
--   [[ sync.t1.t2.x <- C::SP | t1 <- ThreadID, t2 <- ThreadID, x <- Data ]]
--   [[ close.t <- C::closeLP.t | t <- ThreadID ]]


-- assert SpecSP [T= SystemSP
-- assert SpecSP [F= SystemSP
-- assert SpecSP [FD= SystemSP